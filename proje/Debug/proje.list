
proje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b0  080042b0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080042b0  080042b0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042b0  080042b0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080042b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  20000014  080042cc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  080042cc  00020848  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec4e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002191  00000000  00000000  0002ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00030e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00031af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019769  00000000  00000000  000326d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001081b  00000000  00000000  0004be41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d51  00000000  00000000  0005c65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f13ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  000f1400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004260 	.word	0x08004260

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004260 	.word	0x08004260

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_GPIO_Init+0x2c>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_GPIO_Init+0x2c>)
 800022c:	2180      	movs	r1, #128	; 0x80
 800022e:	0289      	lsls	r1, r1, #10
 8000230:	430a      	orrs	r2, r1
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <MX_GPIO_Init+0x2c>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	029b      	lsls	r3, r3, #10
 800023c:	4013      	ands	r3, r2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 ff1e 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f8a4 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f7ff ffe0 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000260:	f000 fe68 	bl	8000f34 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000264:	f000 fde0 	bl	8000e28 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	//HAL_GPIO_WritePin( GPIOB, (uint16_t)0x8000U , 0);
	HAL_UART_Receive_IT(&huart1, VeriTextRX_Buffer, 1);
 8000268:	4941      	ldr	r1, [pc, #260]	; (8000370 <main+0x120>)
 800026a:	4b42      	ldr	r3, [pc, #264]	; (8000374 <main+0x124>)
 800026c:	2201      	movs	r2, #1
 800026e:	0018      	movs	r0, r3
 8000270:	f002 fdb8 	bl	8002de4 <HAL_UART_Receive_IT>
	//HAL_TIM_Base_Start_IT ( &htim2 );
	//HAL_GPIO_WritePin( USER_PWM_GPIO_Port, USER_PWM_Pin , 0);
	VeriBilgi_B[0] = 41;
 8000274:	4b40      	ldr	r3, [pc, #256]	; (8000378 <main+0x128>)
 8000276:	2229      	movs	r2, #41	; 0x29
 8000278:	801a      	strh	r2, [r3, #0]
	VeriBilgi_B[1] = 0;
 800027a:	4b3f      	ldr	r3, [pc, #252]	; (8000378 <main+0x128>)
 800027c:	2200      	movs	r2, #0
 800027e:	805a      	strh	r2, [r3, #2]
	VeriBilgi_B[2] = 1;
 8000280:	4b3d      	ldr	r3, [pc, #244]	; (8000378 <main+0x128>)
 8000282:	2201      	movs	r2, #1
 8000284:	809a      	strh	r2, [r3, #4]
	VeriBilgi_B[3] = 0;
 8000286:	4b3c      	ldr	r3, [pc, #240]	; (8000378 <main+0x128>)
 8000288:	2200      	movs	r2, #0
 800028a:	80da      	strh	r2, [r3, #6]
	VeriBilgi_B[4] = 85;
 800028c:	4b3a      	ldr	r3, [pc, #232]	; (8000378 <main+0x128>)
 800028e:	2255      	movs	r2, #85	; 0x55
 8000290:	811a      	strh	r2, [r3, #8]
	VeriBilgi_B[5] = 69;
 8000292:	4b39      	ldr	r3, [pc, #228]	; (8000378 <main+0x128>)
 8000294:	2245      	movs	r2, #69	; 0x45
 8000296:	815a      	strh	r2, [r3, #10]
  /* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE START WHILE */


			 	adc1 = 10 ;
 8000298:	4b38      	ldr	r3, [pc, #224]	; (800037c <main+0x12c>)
 800029a:	220a      	movs	r2, #10
 800029c:	801a      	strh	r2, [r3, #0]

				Veri_Sakla [ 0 ] = adc1;
 800029e:	4b37      	ldr	r3, [pc, #220]	; (800037c <main+0x12c>)
 80002a0:	881a      	ldrh	r2, [r3, #0]
 80002a2:	4b37      	ldr	r3, [pc, #220]	; (8000380 <main+0x130>)
 80002a4:	801a      	strh	r2, [r3, #0]

				Veri_Sakla [ 1 ] = adc1;
 80002a6:	4b35      	ldr	r3, [pc, #212]	; (800037c <main+0x12c>)
 80002a8:	881a      	ldrh	r2, [r3, #0]
 80002aa:	4b35      	ldr	r3, [pc, #212]	; (8000380 <main+0x130>)
 80002ac:	805a      	strh	r2, [r3, #2]

				pinsayac = (uint16_t)0x0001U ;
 80002ae:	4b35      	ldr	r3, [pc, #212]	; (8000384 <main+0x134>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	801a      	strh	r2, [r3, #0]

				for (i = 2 ; i <= 7 ; i++)
 80002b4:	4b34      	ldr	r3, [pc, #208]	; (8000388 <main+0x138>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	701a      	strb	r2, [r3, #0]
 80002ba:	e01b      	b.n	80002f4 <main+0xa4>
				{
					Veri_Sakla [ i ] = HAL_GPIO_ReadPin ( GPIOC, pinsayac );
 80002bc:	4b31      	ldr	r3, [pc, #196]	; (8000384 <main+0x134>)
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	4a32      	ldr	r2, [pc, #200]	; (800038c <main+0x13c>)
 80002c2:	0019      	movs	r1, r3
 80002c4:	0010      	movs	r0, r2
 80002c6:	f001 fa1d 	bl	8001704 <HAL_GPIO_ReadPin>
 80002ca:	0003      	movs	r3, r0
 80002cc:	0019      	movs	r1, r3
 80002ce:	4b2e      	ldr	r3, [pc, #184]	; (8000388 <main+0x138>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	001a      	movs	r2, r3
 80002d4:	b289      	uxth	r1, r1
 80002d6:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <main+0x130>)
 80002d8:	0052      	lsls	r2, r2, #1
 80002da:	52d1      	strh	r1, [r2, r3]
					pinsayac = pinsayac * 2;
 80002dc:	4b29      	ldr	r3, [pc, #164]	; (8000384 <main+0x134>)
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	18db      	adds	r3, r3, r3
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	4b27      	ldr	r3, [pc, #156]	; (8000384 <main+0x134>)
 80002e6:	801a      	strh	r2, [r3, #0]
				for (i = 2 ; i <= 7 ; i++)
 80002e8:	4b27      	ldr	r3, [pc, #156]	; (8000388 <main+0x138>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <main+0x138>)
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	4b24      	ldr	r3, [pc, #144]	; (8000388 <main+0x138>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d9df      	bls.n	80002bc <main+0x6c>
				}
				dac1	 = 15;
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <main+0x140>)
 80002fe:	220f      	movs	r2, #15
 8000300:	801a      	strh	r2, [r3, #0]

				dac2	 = 15;
 8000302:	4b24      	ldr	r3, [pc, #144]	; (8000394 <main+0x144>)
 8000304:	220f      	movs	r2, #15
 8000306:	801a      	strh	r2, [r3, #0]

				pinsayac = (uint16_t)0x0040U;
 8000308:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <main+0x134>)
 800030a:	2240      	movs	r2, #64	; 0x40
 800030c:	801a      	strh	r2, [r3, #0]
				for (i = 10 ; i <= 15 ; i++)
 800030e:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <main+0x138>)
 8000310:	220a      	movs	r2, #10
 8000312:	701a      	strb	r2, [r3, #0]
 8000314:	e018      	b.n	8000348 <main+0xf8>
				{
					HAL_GPIO_WritePin ( GPIOC, pinsayac, Veri_Sakla [ i ] );
 8000316:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <main+0x134>)
 8000318:	8819      	ldrh	r1, [r3, #0]
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <main+0x138>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	001a      	movs	r2, r3
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <main+0x130>)
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	5ad3      	ldrh	r3, [r2, r3]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4818      	ldr	r0, [pc, #96]	; (800038c <main+0x13c>)
 800032a:	001a      	movs	r2, r3
 800032c:	f001 fa07 	bl	800173e <HAL_GPIO_WritePin>
					pinsayac = pinsayac*2;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <main+0x134>)
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	18db      	adds	r3, r3, r3
 8000336:	b29a      	uxth	r2, r3
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <main+0x134>)
 800033a:	801a      	strh	r2, [r3, #0]
				for (i = 10 ; i <= 15 ; i++)
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <main+0x138>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <main+0x138>)
 8000346:	701a      	strb	r2, [r3, #0]
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <main+0x138>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b0f      	cmp	r3, #15
 800034e:	d9e2      	bls.n	8000316 <main+0xc6>
				}
		 		if ( !VeriTextTX_MC ) {
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <main+0x148>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d19f      	bne.n	8000298 <main+0x48>
					HAL_UART_Transmit_IT ( &huart1, VeriTextTX, VeriTextTX_index + 1 );
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <main+0x14c>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b29b      	uxth	r3, r3
 800035e:	3301      	adds	r3, #1
 8000360:	b29a      	uxth	r2, r3
 8000362:	490f      	ldr	r1, [pc, #60]	; (80003a0 <main+0x150>)
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <main+0x124>)
 8000366:	0018      	movs	r0, r3
 8000368:	f002 fcbc 	bl	8002ce4 <HAL_UART_Transmit_IT>
			 	adc1 = 10 ;
 800036c:	e794      	b.n	8000298 <main+0x48>
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	20000134 	.word	0x20000134
 8000374:	200007c0 	.word	0x200007c0
 8000378:	20000348 	.word	0x20000348
 800037c:	20000552 	.word	0x20000552
 8000380:	20000758 	.word	0x20000758
 8000384:	20000550 	.word	0x20000550
 8000388:	2000054c 	.word	0x2000054c
 800038c:	48000800 	.word	0x48000800
 8000390:	20000554 	.word	0x20000554
 8000394:	20000556 	.word	0x20000556
 8000398:	20000130 	.word	0x20000130
 800039c:	20000131 	.word	0x20000131
 80003a0:	20000030 	.word	0x20000030

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b099      	sub	sp, #100	; 0x64
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	242c      	movs	r4, #44	; 0x2c
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	0018      	movs	r0, r3
 80003b0:	2334      	movs	r3, #52	; 0x34
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f003 ff4b 	bl	8004250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	231c      	movs	r3, #28
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	2310      	movs	r3, #16
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f003 ff43 	bl	8004250 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ca:	003b      	movs	r3, r7
 80003cc:	0018      	movs	r0, r3
 80003ce:	231c      	movs	r3, #28
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f003 ff3c 	bl	8004250 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d8:	0021      	movs	r1, r4
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2202      	movs	r2, #2
 80003de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2201      	movs	r2, #1
 80003e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2210      	movs	r2, #16
 80003ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2202      	movs	r2, #2
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2280      	movs	r2, #128	; 0x80
 80003f6:	0212      	lsls	r2, r2, #8
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	0352      	lsls	r2, r2, #13
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2200      	movs	r2, #0
 8000406:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000408:	187b      	adds	r3, r7, r1
 800040a:	0018      	movs	r0, r3
 800040c:	f001 f9b4 	bl	8001778 <HAL_RCC_OscConfig>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000414:	f000 fc9c 	bl	8000d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	211c      	movs	r1, #28
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2207      	movs	r2, #7
 800041e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2202      	movs	r2, #2
 8000424:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2101      	movs	r1, #1
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fd24 	bl	8001e84 <HAL_RCC_ClockConfig>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000440:	f000 fc86 	bl	8000d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000444:	003b      	movs	r3, r7
 8000446:	2201      	movs	r2, #1
 8000448:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800044a:	003b      	movs	r3, r7
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000450:	003b      	movs	r3, r7
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fe92 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800045c:	f000 fc78 	bl	8000d50 <Error_Handler>
  }
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b019      	add	sp, #100	; 0x64
 8000466:	bd90      	pop	{r4, r7, pc}

08000468 <ModRTU_CRC>:

/* USER CODE BEGIN 4 */
uint16_t ModRTU_CRC(uint16_t buf[], int len) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 8000472:	2316      	movs	r3, #22
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	2201      	movs	r2, #1
 8000478:	4252      	negs	r2, r2
 800047a:	801a      	strh	r2, [r3, #0]

	for (int pos = 0; pos < len; pos++) {
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	e02e      	b.n	80004e0 <ModRTU_CRC+0x78>
		crc ^= (uint16_t) buf[pos];      // XOR byte into least sig. byte of crc
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	18d3      	adds	r3, r2, r3
 800048a:	8819      	ldrh	r1, [r3, #0]
 800048c:	2216      	movs	r2, #22
 800048e:	18bb      	adds	r3, r7, r2
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	404a      	eors	r2, r1
 8000496:	801a      	strh	r2, [r3, #0]

		for (int i = 8; i != 0; i--) {    // Loop over each bit
 8000498:	2308      	movs	r3, #8
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	e01a      	b.n	80004d4 <ModRTU_CRC+0x6c>
			if ((crc & 0x0001) != 0) {      // If the LSB is set
 800049e:	2116      	movs	r1, #22
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	2201      	movs	r2, #1
 80004a6:	4013      	ands	r3, r2
 80004a8:	d00b      	beq.n	80004c2 <ModRTU_CRC+0x5a>
				crc >>= 1;                    // Shift right and XOR 0xA001
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	187a      	adds	r2, r7, r1
 80004ae:	8812      	ldrh	r2, [r2, #0]
 80004b0:	0852      	lsrs	r2, r2, #1
 80004b2:	801a      	strh	r2, [r3, #0]
				crc ^= 0xA001;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	187a      	adds	r2, r7, r1
 80004b8:	8812      	ldrh	r2, [r2, #0]
 80004ba:	490f      	ldr	r1, [pc, #60]	; (80004f8 <ModRTU_CRC+0x90>)
 80004bc:	404a      	eors	r2, r1
 80004be:	801a      	strh	r2, [r3, #0]
 80004c0:	e005      	b.n	80004ce <ModRTU_CRC+0x66>
			} else
				// Else LSB is not set
				crc >>= 1;                    // Just shift right
 80004c2:	2216      	movs	r2, #22
 80004c4:	18bb      	adds	r3, r7, r2
 80004c6:	18ba      	adds	r2, r7, r2
 80004c8:	8812      	ldrh	r2, [r2, #0]
 80004ca:	0852      	lsrs	r2, r2, #1
 80004cc:	801a      	strh	r2, [r3, #0]
		for (int i = 8; i != 0; i--) {    // Loop over each bit
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1e1      	bne.n	800049e <ModRTU_CRC+0x36>
	for (int pos = 0; pos < len; pos++) {
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	3301      	adds	r3, #1
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693a      	ldr	r2, [r7, #16]
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	dbcc      	blt.n	8000482 <ModRTU_CRC+0x1a>
		}
	}
	// Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
	return crc;
 80004e8:	2316      	movs	r3, #22
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	881b      	ldrh	r3, [r3, #0]
}
 80004ee:	0018      	movs	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b006      	add	sp, #24
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	ffffa001 	.word	0xffffa001

080004fc <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart ) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if ( huart->Instance == USART1 ) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <HAL_UART_TxCpltCallback+0x20>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d102      	bne.n	8000514 <HAL_UART_TxCpltCallback+0x18>
		VeriTextTX_MC = 1;
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <HAL_UART_TxCpltCallback+0x24>)
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
	}
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b002      	add	sp, #8
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40013800 	.word	0x40013800
 8000520:	20000130 	.word	0x20000130

08000524 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart ) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if ( huart->Instance == USART1 ) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <HAL_UART_RxCpltCallback+0xac>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d148      	bne.n	80005c8 <HAL_UART_RxCpltCallback+0xa4>
		if ( VeriTextRX_MC == 1 ) {
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <HAL_UART_RxCpltCallback+0xb0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d110      	bne.n	8000560 <HAL_UART_RxCpltCallback+0x3c>

			HAL_TIM_Base_Stop_IT ( &htim1 );
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <HAL_UART_RxCpltCallback+0xb4>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 ffbb 	bl	80024bc <HAL_TIM_Base_Stop_IT>
			VeriTextRX_Modbus [ VeriTextRX_Modbus_index ] = VeriTextRX_Buffer [ 0 ];
 8000546:	4b25      	ldr	r3, [pc, #148]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	001a      	movs	r2, r3
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <HAL_UART_RxCpltCallback+0xbc>)
 800054e:	7819      	ldrb	r1, [r3, #0]
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <HAL_UART_RxCpltCallback+0xc0>)
 8000552:	5499      	strb	r1, [r3, r2]
			VeriTextRX_Modbus_index++;
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 800055e:	701a      	strb	r2, [r3, #0]
		}

		Veri = VeriTextRX_Buffer [ 0 ];
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <HAL_UART_RxCpltCallback+0xbc>)
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <HAL_UART_RxCpltCallback+0xc4>)
 8000566:	701a      	strb	r2, [r3, #0]

		if ( Veri == 41 ) {
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <HAL_UART_RxCpltCallback+0xc4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b29      	cmp	r3, #41	; 0x29
 800056e:	d10a      	bne.n	8000586 <HAL_UART_RxCpltCallback+0x62>
			VeriTextRX_MC = 1;
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <HAL_UART_RxCpltCallback+0xb0>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
			VeriTextRX_Modbus [ 0 ] = VeriTextRX_Buffer [ 0 ];
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <HAL_UART_RxCpltCallback+0xbc>)
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <HAL_UART_RxCpltCallback+0xc0>)
 800057c:	701a      	strb	r2, [r3, #0]
			Veri_Bitti_ilk = VeriTextRX_Modbus_index;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <HAL_UART_RxCpltCallback+0xc8>)
 8000584:	701a      	strb	r2, [r3, #0]
		}
		if ( Veri_Bitti_FS != 0 ) {
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <HAL_UART_RxCpltCallback+0xcc>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <HAL_UART_RxCpltCallback+0x72>

			HAL_TIM_Base_Start_IT ( &htim1 );
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_UART_RxCpltCallback+0xb4>)
 8000590:	0018      	movs	r0, r3
 8000592:	f001 ff41 	bl	8002418 <HAL_TIM_Base_Start_IT>
		}
		sayac = 0;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_UART_RxCpltCallback+0xd0>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
		//HAL_TIM_Base_Start_IT(&htim1);
		Veri_Bitti_FS = 1;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HAL_UART_RxCpltCallback+0xcc>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
		VeriTextRX [ VeriTextRX_index ] = VeriTextRX_Buffer [ 0 ];
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_UART_RxCpltCallback+0xd4>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	001a      	movs	r2, r3
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <HAL_UART_RxCpltCallback+0xbc>)
 80005aa:	7819      	ldrb	r1, [r3, #0]
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <HAL_UART_RxCpltCallback+0xd8>)
 80005ae:	5499      	strb	r1, [r3, r2]
		VeriTextRX_index++;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_UART_RxCpltCallback+0xd4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_UART_RxCpltCallback+0xd4>)
 80005ba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT ( &huart1, VeriTextRX_Buffer, 1 );
 80005bc:	4908      	ldr	r1, [pc, #32]	; (80005e0 <HAL_UART_RxCpltCallback+0xbc>)
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_UART_RxCpltCallback+0xdc>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 fc0e 	bl	8002de4 <HAL_UART_Receive_IT>

	}
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40013800 	.word	0x40013800
 80005d4:	20000238 	.word	0x20000238
 80005d8:	20000778 	.word	0x20000778
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000134 	.word	0x20000134
 80005e4:	2000023c 	.word	0x2000023c
 80005e8:	20000548 	.word	0x20000548
 80005ec:	2000033d 	.word	0x2000033d
 80005f0:	2000033c 	.word	0x2000033c
 80005f4:	20000340 	.word	0x20000340
 80005f8:	20000132 	.word	0x20000132
 80005fc:	20000138 	.word	0x20000138
 8000600:	200007c0 	.word	0x200007c0

08000604 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim ) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	if ( htim -> Instance == TIM1 ) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d121      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x56>
		sayac++;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800061e:	601a      	str	r2, [r3, #0]
		if ( sayac == 4 ) {
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d118      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x56>
			sayac_byte++;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
			sayac = 0;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
			if ( sayac_byte == 7 ) {
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b07      	cmp	r3, #7
 800063e:	d10c      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x56>

				sayac_byte = 0;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]

				HAL_TIM_Base_Stop_IT(&htim1);
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000648:	0018      	movs	r0, r3
 800064a:	f001 ff37 	bl	80024bc <HAL_TIM_Base_Stop_IT>

				Veri_Bitti( VeriTextRX_Modbus_index, 1 );
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2101      	movs	r1, #1
 8000654:	0018      	movs	r0, r3
 8000656:	f000 f80f 	bl	8000678 <Veri_Bitti>
			}
		}
	}

 }
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40012c00 	.word	0x40012c00
 8000668:	20000340 	.word	0x20000340
 800066c:	20000344 	.word	0x20000344
 8000670:	20000778 	.word	0x20000778
 8000674:	20000000 	.word	0x20000000

08000678 <Veri_Bitti>:


void Veri_Bitti(uint16_t son_index, uint16_t ilk_index) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	0002      	movs	r2, r0
 8000680:	1dbb      	adds	r3, r7, #6
 8000682:	801a      	strh	r2, [r3, #0]
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	1c0a      	adds	r2, r1, #0
 8000688:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOO6_GPIO_Port,GPIOO6_Pin,1);
	for (uint8_t i = 0; i < VeriTextTX_index+1; i++) {
 800068a:	230f      	movs	r3, #15
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e00a      	b.n	80006aa <Veri_Bitti+0x32>
		VeriTextTX[i] = 0;
 8000694:	200f      	movs	r0, #15
 8000696:	183b      	adds	r3, r7, r0
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4ad6      	ldr	r2, [pc, #856]	; (80009f4 <Veri_Bitti+0x37c>)
 800069c:	2100      	movs	r1, #0
 800069e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < VeriTextTX_index+1; i++) {
 80006a0:	183b      	adds	r3, r7, r0
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	183b      	adds	r3, r7, r0
 80006a6:	3201      	adds	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	4bd3      	ldr	r3, [pc, #844]	; (80009f8 <Veri_Bitti+0x380>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	220f      	movs	r2, #15
 80006b0:	18ba      	adds	r2, r7, r2
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d9ed      	bls.n	8000694 <Veri_Bitti+0x1c>
	}
	for (uint8_t i = 0; i < son_index - 2; i++) {
 80006b8:	230e      	movs	r3, #14
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e00f      	b.n	80006e2 <Veri_Bitti+0x6a>
		VeriBilgi_B[i] = VeriTextRX_Modbus[i];
 80006c2:	200e      	movs	r0, #14
 80006c4:	183b      	adds	r3, r7, r0
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4acc      	ldr	r2, [pc, #816]	; (80009fc <Veri_Bitti+0x384>)
 80006ca:	5cd1      	ldrb	r1, [r2, r3]
 80006cc:	183b      	adds	r3, r7, r0
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	b289      	uxth	r1, r1
 80006d2:	4bcb      	ldr	r3, [pc, #812]	; (8000a00 <Veri_Bitti+0x388>)
 80006d4:	0052      	lsls	r2, r2, #1
 80006d6:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; i < son_index - 2; i++) {
 80006d8:	183b      	adds	r3, r7, r0
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	183b      	adds	r3, r7, r0
 80006de:	3201      	adds	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	230e      	movs	r3, #14
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	3b02      	subs	r3, #2
 80006ee:	429a      	cmp	r2, r3
 80006f0:	dbe7      	blt.n	80006c2 <Veri_Bitti+0x4a>
	}
	son_index = son_index - 2 ;
 80006f2:	1dbb      	adds	r3, r7, #6
 80006f4:	1dba      	adds	r2, r7, #6
 80006f6:	8812      	ldrh	r2, [r2, #0]
 80006f8:	3a02      	subs	r2, #2
 80006fa:	801a      	strh	r2, [r3, #0]
	CrC_kontrol = ModRTU_CRC( VeriBilgi_B, son_index );
 80006fc:	1dbb      	adds	r3, r7, #6
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4bbf      	ldr	r3, [pc, #764]	; (8000a00 <Veri_Bitti+0x388>)
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff feaf 	bl	8000468 <ModRTU_CRC>
 800070a:	0003      	movs	r3, r0
 800070c:	001a      	movs	r2, r3
 800070e:	4bbd      	ldr	r3, [pc, #756]	; (8000a04 <Veri_Bitti+0x38c>)
 8000710:	801a      	strh	r2, [r3, #0]
	VeriBilgi_B[son_index] = CrC_kontrol & 0xff;
 8000712:	4bbc      	ldr	r3, [pc, #752]	; (8000a04 <Veri_Bitti+0x38c>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	1dba      	adds	r2, r7, #6
 8000718:	8812      	ldrh	r2, [r2, #0]
 800071a:	21ff      	movs	r1, #255	; 0xff
 800071c:	400b      	ands	r3, r1
 800071e:	b299      	uxth	r1, r3
 8000720:	4bb7      	ldr	r3, [pc, #732]	; (8000a00 <Veri_Bitti+0x388>)
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	52d1      	strh	r1, [r2, r3]
	VeriBilgi_B[son_index + 1 ] = (CrC_kontrol >> 8) & 0xff;
 8000726:	4bb7      	ldr	r3, [pc, #732]	; (8000a04 <Veri_Bitti+0x38c>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	1dba      	adds	r2, r7, #6
 800072c:	8812      	ldrh	r2, [r2, #0]
 800072e:	3201      	adds	r2, #1
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	b299      	uxth	r1, r3
 8000734:	4bb2      	ldr	r3, [pc, #712]	; (8000a00 <Veri_Bitti+0x388>)
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	52d1      	strh	r1, [r2, r3]
	if (VeriTextRX_Modbus[son_index] == VeriBilgi_B[son_index]	&& VeriTextRX_Modbus[son_index + 1] == VeriBilgi_B[son_index+1]) {
 800073a:	1dbb      	adds	r3, r7, #6
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	4aaf      	ldr	r2, [pc, #700]	; (80009fc <Veri_Bitti+0x384>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	b29a      	uxth	r2, r3
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	8819      	ldrh	r1, [r3, #0]
 8000748:	4bad      	ldr	r3, [pc, #692]	; (8000a00 <Veri_Bitti+0x388>)
 800074a:	0049      	lsls	r1, r1, #1
 800074c:	5acb      	ldrh	r3, [r1, r3]
 800074e:	429a      	cmp	r2, r3
 8000750:	d000      	beq.n	8000754 <Veri_Bitti+0xdc>
 8000752:	e2d6      	b.n	8000d02 <Veri_Bitti+0x68a>
 8000754:	1dbb      	adds	r3, r7, #6
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4aa8      	ldr	r2, [pc, #672]	; (80009fc <Veri_Bitti+0x384>)
 800075c:	5cd3      	ldrb	r3, [r2, r3]
 800075e:	b29a      	uxth	r2, r3
 8000760:	1dbb      	adds	r3, r7, #6
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	1c59      	adds	r1, r3, #1
 8000766:	4ba6      	ldr	r3, [pc, #664]	; (8000a00 <Veri_Bitti+0x388>)
 8000768:	0049      	lsls	r1, r1, #1
 800076a:	5acb      	ldrh	r3, [r1, r3]
 800076c:	429a      	cmp	r2, r3
 800076e:	d000      	beq.n	8000772 <Veri_Bitti+0xfa>
 8000770:	e2c7      	b.n	8000d02 <Veri_Bitti+0x68a>

		switch (VeriTextRX_Modbus[ilk_index]) {
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	4aa1      	ldr	r2, [pc, #644]	; (80009fc <Veri_Bitti+0x384>)
 8000778:	5cd3      	ldrb	r3, [r2, r3]
 800077a:	2b10      	cmp	r3, #16
 800077c:	d100      	bne.n	8000780 <Veri_Bitti+0x108>
 800077e:	e1c3      	b.n	8000b08 <Veri_Bitti+0x490>
 8000780:	dd00      	ble.n	8000784 <Veri_Bitti+0x10c>
 8000782:	e256      	b.n	8000c32 <Veri_Bitti+0x5ba>
 8000784:	2b06      	cmp	r3, #6
 8000786:	d100      	bne.n	800078a <Veri_Bitti+0x112>
 8000788:	e150      	b.n	8000a2c <Veri_Bitti+0x3b4>
 800078a:	dd00      	ble.n	800078e <Veri_Bitti+0x116>
 800078c:	e251      	b.n	8000c32 <Veri_Bitti+0x5ba>
 800078e:	2b03      	cmp	r3, #3
 8000790:	d003      	beq.n	800079a <Veri_Bitti+0x122>
 8000792:	2b04      	cmp	r3, #4
 8000794:	d100      	bne.n	8000798 <Veri_Bitti+0x120>
 8000796:	e0cf      	b.n	8000938 <Veri_Bitti+0x2c0>
							VeriTextTX [ 7 ] = ( CrC_kontrol >> 8 ) & 0xff;
							VeriTextTX_index = 8 ;
			break;
		default:                    //default

			break;
 8000798:	e24b      	b.n	8000c32 <Veri_Bitti+0x5ba>
				DATA  = ( VeriTextRX_Modbus [ ilk_index + 1 ] << 8 )| VeriTextRX_Modbus [ ilk_index + 2 ];
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a96      	ldr	r2, [pc, #600]	; (80009fc <Veri_Bitti+0x384>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	b21a      	sxth	r2, r3
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	4993      	ldr	r1, [pc, #588]	; (80009fc <Veri_Bitti+0x384>)
 80007b0:	5ccb      	ldrb	r3, [r1, r3]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b93      	ldr	r3, [pc, #588]	; (8000a08 <Veri_Bitti+0x390>)
 80007bc:	801a      	strh	r2, [r3, #0]
				DATA1 = ( VeriTextRX_Modbus [ ilk_index + 3 ] << 8  )| VeriTextRX_Modbus [ ilk_index + 4 ];
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	3303      	adds	r3, #3
 80007c4:	4a8d      	ldr	r2, [pc, #564]	; (80009fc <Veri_Bitti+0x384>)
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	3304      	adds	r3, #4
 80007d2:	498a      	ldr	r1, [pc, #552]	; (80009fc <Veri_Bitti+0x384>)
 80007d4:	5ccb      	ldrb	r3, [r1, r3]
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21b      	sxth	r3, r3
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4b8b      	ldr	r3, [pc, #556]	; (8000a0c <Veri_Bitti+0x394>)
 80007e0:	801a      	strh	r2, [r3, #0]
					VeriTextTX [ 0 ] = 41;
 80007e2:	4b84      	ldr	r3, [pc, #528]	; (80009f4 <Veri_Bitti+0x37c>)
 80007e4:	2229      	movs	r2, #41	; 0x29
 80007e6:	701a      	strb	r2, [r3, #0]
					VeriTextTX [ 1 ] = 03;
 80007e8:	4b82      	ldr	r3, [pc, #520]	; (80009f4 <Veri_Bitti+0x37c>)
 80007ea:	2203      	movs	r2, #3
 80007ec:	705a      	strb	r2, [r3, #1]
					VeriTextTX [ 2 ] = DATA1 * 2;
 80007ee:	4b87      	ldr	r3, [pc, #540]	; (8000a0c <Veri_Bitti+0x394>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	18db      	adds	r3, r3, r3
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b7e      	ldr	r3, [pc, #504]	; (80009f4 <Veri_Bitti+0x37c>)
 80007fa:	709a      	strb	r2, [r3, #2]
					Test = DATA;
 80007fc:	4b82      	ldr	r3, [pc, #520]	; (8000a08 <Veri_Bitti+0x390>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b83      	ldr	r3, [pc, #524]	; (8000a10 <Veri_Bitti+0x398>)
 8000804:	701a      	strb	r2, [r3, #0]
					for ( i = 0 ; i < DATA1 ; i++ )
 8000806:	4b83      	ldr	r3, [pc, #524]	; (8000a14 <Veri_Bitti+0x39c>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	e017      	b.n	800083e <Veri_Bitti+0x1c6>
						Test++;
 800080e:	4b80      	ldr	r3, [pc, #512]	; (8000a10 <Veri_Bitti+0x398>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b7e      	ldr	r3, [pc, #504]	; (8000a10 <Veri_Bitti+0x398>)
 8000818:	701a      	strb	r2, [r3, #0]
						Data_Array [ i ] = Veri_Sakla [ Test ];
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <Veri_Bitti+0x398>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	001a      	movs	r2, r3
 8000820:	4b7d      	ldr	r3, [pc, #500]	; (8000a18 <Veri_Bitti+0x3a0>)
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	5ad1      	ldrh	r1, [r2, r3]
 8000826:	4b7b      	ldr	r3, [pc, #492]	; (8000a14 <Veri_Bitti+0x39c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	001a      	movs	r2, r3
 800082c:	b2c9      	uxtb	r1, r1
 800082e:	4b7b      	ldr	r3, [pc, #492]	; (8000a1c <Veri_Bitti+0x3a4>)
 8000830:	5499      	strb	r1, [r3, r2]
					for ( i = 0 ; i < DATA1 ; i++ )
 8000832:	4b78      	ldr	r3, [pc, #480]	; (8000a14 <Veri_Bitti+0x39c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b76      	ldr	r3, [pc, #472]	; (8000a14 <Veri_Bitti+0x39c>)
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	4b75      	ldr	r3, [pc, #468]	; (8000a14 <Veri_Bitti+0x39c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b71      	ldr	r3, [pc, #452]	; (8000a0c <Veri_Bitti+0x394>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d3e0      	bcc.n	800080e <Veri_Bitti+0x196>
					for( i = 0 ; i <= DATA1 ; i++ )
 800084c:	4b71      	ldr	r3, [pc, #452]	; (8000a14 <Veri_Bitti+0x39c>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	e027      	b.n	80008a4 <Veri_Bitti+0x22c>
						Data_Array1 [ sayac1 ] = Data_Array [ i ] >> 8;
 8000854:	4b6f      	ldr	r3, [pc, #444]	; (8000a14 <Veri_Bitti+0x39c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	001a      	movs	r2, r3
 800085a:	4b70      	ldr	r3, [pc, #448]	; (8000a1c <Veri_Bitti+0x3a4>)
 800085c:	5c9b      	ldrb	r3, [r3, r2]
 800085e:	1219      	asrs	r1, r3, #8
 8000860:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <Veri_Bitti+0x3a8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001a      	movs	r2, r3
 8000866:	b2c9      	uxtb	r1, r1
 8000868:	4b6e      	ldr	r3, [pc, #440]	; (8000a24 <Veri_Bitti+0x3ac>)
 800086a:	5499      	strb	r1, [r3, r2]
						sayac1++;
 800086c:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <Veri_Bitti+0x3a8>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b6a      	ldr	r3, [pc, #424]	; (8000a20 <Veri_Bitti+0x3a8>)
 8000876:	701a      	strb	r2, [r3, #0]
						Data_Array1 [ sayac1 ] = Data_Array [ i ] ;
 8000878:	4b66      	ldr	r3, [pc, #408]	; (8000a14 <Veri_Bitti+0x39c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	0019      	movs	r1, r3
 800087e:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <Veri_Bitti+0x3a8>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	001a      	movs	r2, r3
 8000884:	4b65      	ldr	r3, [pc, #404]	; (8000a1c <Veri_Bitti+0x3a4>)
 8000886:	5c59      	ldrb	r1, [r3, r1]
 8000888:	4b66      	ldr	r3, [pc, #408]	; (8000a24 <Veri_Bitti+0x3ac>)
 800088a:	5499      	strb	r1, [r3, r2]
						sayac1++;
 800088c:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <Veri_Bitti+0x3a8>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <Veri_Bitti+0x3a8>)
 8000896:	701a      	strb	r2, [r3, #0]
					for( i = 0 ; i <= DATA1 ; i++ )
 8000898:	4b5e      	ldr	r3, [pc, #376]	; (8000a14 <Veri_Bitti+0x39c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b5c      	ldr	r3, [pc, #368]	; (8000a14 <Veri_Bitti+0x39c>)
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	4b5b      	ldr	r3, [pc, #364]	; (8000a14 <Veri_Bitti+0x39c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4b58      	ldr	r3, [pc, #352]	; (8000a0c <Veri_Bitti+0x394>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d9d0      	bls.n	8000854 <Veri_Bitti+0x1dc>
					for ( i = 3 ; i < 3 + sayac1  ; i++ )
 80008b2:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <Veri_Bitti+0x39c>)
 80008b4:	2203      	movs	r2, #3
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	e00f      	b.n	80008da <Veri_Bitti+0x262>
						VeriTextTX [ i ] = Data_Array1 [ i - 3 ];
 80008ba:	4b56      	ldr	r3, [pc, #344]	; (8000a14 <Veri_Bitti+0x39c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3b03      	subs	r3, #3
 80008c0:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <Veri_Bitti+0x39c>)
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	0011      	movs	r1, r2
 80008c6:	4a57      	ldr	r2, [pc, #348]	; (8000a24 <Veri_Bitti+0x3ac>)
 80008c8:	5cd2      	ldrb	r2, [r2, r3]
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <Veri_Bitti+0x37c>)
 80008cc:	545a      	strb	r2, [r3, r1]
					for ( i = 3 ; i < 3 + sayac1  ; i++ )
 80008ce:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <Veri_Bitti+0x39c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b4f      	ldr	r3, [pc, #316]	; (8000a14 <Veri_Bitti+0x39c>)
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	4b51      	ldr	r3, [pc, #324]	; (8000a20 <Veri_Bitti+0x3a8>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3302      	adds	r3, #2
 80008e0:	4a4c      	ldr	r2, [pc, #304]	; (8000a14 <Veri_Bitti+0x39c>)
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	4293      	cmp	r3, r2
 80008e6:	dae8      	bge.n	80008ba <Veri_Bitti+0x242>
					CrC_kontrol      = 0;
 80008e8:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <Veri_Bitti+0x38c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	801a      	strh	r2, [r3, #0]
					CrC_kontrol      = ModRTU_CRC( VeriTextTX, sayac1 + 3 );
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <Veri_Bitti+0x3a8>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	1cda      	adds	r2, r3, #3
 80008f4:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <Veri_Bitti+0x37c>)
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fdb5 	bl	8000468 <ModRTU_CRC>
 80008fe:	0003      	movs	r3, r0
 8000900:	001a      	movs	r2, r3
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <Veri_Bitti+0x38c>)
 8000904:	801a      	strh	r2, [r3, #0]
					VeriTextTX [ sayac1 + 1 ] =   CrC_kontrol & 0xff;
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <Veri_Bitti+0x38c>)
 8000908:	881a      	ldrh	r2, [r3, #0]
 800090a:	4b45      	ldr	r3, [pc, #276]	; (8000a20 <Veri_Bitti+0x3a8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	b2d1      	uxtb	r1, r2
 8000912:	4a38      	ldr	r2, [pc, #224]	; (80009f4 <Veri_Bitti+0x37c>)
 8000914:	54d1      	strb	r1, [r2, r3]
					VeriTextTX [ sayac1 + 2 ] = ( CrC_kontrol >> 8 ) & 0xff;
 8000916:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <Veri_Bitti+0x38c>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <Veri_Bitti+0x3a8>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	3302      	adds	r3, #2
 8000924:	b2d1      	uxtb	r1, r2
 8000926:	4a33      	ldr	r2, [pc, #204]	; (80009f4 <Veri_Bitti+0x37c>)
 8000928:	54d1      	strb	r1, [r2, r3]
					VeriTextTX_index = sayac1 + 3 ;
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <Veri_Bitti+0x3a8>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3303      	adds	r3, #3
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <Veri_Bitti+0x380>)
 8000934:	701a      	strb	r2, [r3, #0]
			break;
 8000936:	e17d      	b.n	8000c34 <Veri_Bitti+0x5bc>
		DATA  = ( VeriTextRX_Modbus [ ilk_index + 1 ] << 8 )| VeriTextRX_Modbus [ ilk_index + 2 ];
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a2f      	ldr	r2, [pc, #188]	; (80009fc <Veri_Bitti+0x384>)
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21a      	sxth	r2, r3
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	3302      	adds	r3, #2
 800094c:	492b      	ldr	r1, [pc, #172]	; (80009fc <Veri_Bitti+0x384>)
 800094e:	5ccb      	ldrb	r3, [r1, r3]
 8000950:	b21b      	sxth	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b21b      	sxth	r3, r3
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <Veri_Bitti+0x390>)
 800095a:	801a      	strh	r2, [r3, #0]
		DATA1 = ( VeriTextRX_Modbus [ ilk_index + 3 ] << 8  )| VeriTextRX_Modbus [ ilk_index + 4 ];
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	3303      	adds	r3, #3
 8000962:	4a26      	ldr	r2, [pc, #152]	; (80009fc <Veri_Bitti+0x384>)
 8000964:	5cd3      	ldrb	r3, [r2, r3]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	b21a      	sxth	r2, r3
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	3304      	adds	r3, #4
 8000970:	4922      	ldr	r1, [pc, #136]	; (80009fc <Veri_Bitti+0x384>)
 8000972:	5ccb      	ldrb	r3, [r1, r3]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <Veri_Bitti+0x394>)
 800097e:	801a      	strh	r2, [r3, #0]
			VeriTextTX [ 0 ] = 41;
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <Veri_Bitti+0x37c>)
 8000982:	2229      	movs	r2, #41	; 0x29
 8000984:	701a      	strb	r2, [r3, #0]
			VeriTextTX [ 1 ] = 04;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <Veri_Bitti+0x37c>)
 8000988:	2204      	movs	r2, #4
 800098a:	705a      	strb	r2, [r3, #1]
			VeriTextTX [ 2 ] = 2;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <Veri_Bitti+0x37c>)
 800098e:	2202      	movs	r2, #2
 8000990:	709a      	strb	r2, [r3, #2]
			DATA1TX 		 = Veri_Sakla[ DATA ];
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <Veri_Bitti+0x390>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	001a      	movs	r2, r3
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <Veri_Bitti+0x3a0>)
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	5ad2      	ldrh	r2, [r2, r3]
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <Veri_Bitti+0x3b0>)
 80009a0:	801a      	strh	r2, [r3, #0]
			VeriTextTX [ 3 ] = DATA1TX >> 8;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <Veri_Bitti+0x3b0>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	0a1b      	lsrs	r3, r3, #8
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <Veri_Bitti+0x37c>)
 80009ae:	70da      	strb	r2, [r3, #3]
			VeriTextTX [ 4 ] = DATA1TX ;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <Veri_Bitti+0x3b0>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <Veri_Bitti+0x37c>)
 80009b8:	711a      	strb	r2, [r3, #4]
			CrC_kontrol      = 0;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <Veri_Bitti+0x38c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	801a      	strh	r2, [r3, #0]
			CrC_kontrol      =   ModRTU_CRC(VeriTextTX, 5);
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <Veri_Bitti+0x37c>)
 80009c2:	2105      	movs	r1, #5
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fd4f 	bl	8000468 <ModRTU_CRC>
 80009ca:	0003      	movs	r3, r0
 80009cc:	001a      	movs	r2, r3
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <Veri_Bitti+0x38c>)
 80009d0:	801a      	strh	r2, [r3, #0]
			VeriTextTX [ 5 ] =  CrC_kontrol & 0xff;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <Veri_Bitti+0x38c>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <Veri_Bitti+0x37c>)
 80009da:	715a      	strb	r2, [r3, #5]
			VeriTextTX [ 6 ] = (CrC_kontrol >> 8) & 0xff;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <Veri_Bitti+0x38c>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <Veri_Bitti+0x37c>)
 80009e8:	719a      	strb	r2, [r3, #6]
			VeriTextTX_index = 6;
 80009ea:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <Veri_Bitti+0x380>)
 80009ec:	2206      	movs	r2, #6
 80009ee:	701a      	strb	r2, [r3, #0]
			break;
 80009f0:	e120      	b.n	8000c34 <Veri_Bitti+0x5bc>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000030 	.word	0x20000030
 80009f8:	20000131 	.word	0x20000131
 80009fc:	2000023c 	.word	0x2000023c
 8000a00:	20000348 	.word	0x20000348
 8000a04:	2000033e 	.word	0x2000033e
 8000a08:	2000054a 	.word	0x2000054a
 8000a0c:	20000002 	.word	0x20000002
 8000a10:	2000054e 	.word	0x2000054e
 8000a14:	2000054c 	.word	0x2000054c
 8000a18:	20000758 	.word	0x20000758
 8000a1c:	20000558 	.word	0x20000558
 8000a20:	2000054d 	.word	0x2000054d
 8000a24:	20000658 	.word	0x20000658
 8000a28:	20000004 	.word	0x20000004
					DATA  = ( VeriTextRX_Modbus [ ilk_index + 1 ] << 8 )| VeriTextRX_Modbus [ ilk_index + 2 ];
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4ab6      	ldr	r2, [pc, #728]	; (8000d0c <Veri_Bitti+0x694>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	49b2      	ldr	r1, [pc, #712]	; (8000d0c <Veri_Bitti+0x694>)
 8000a42:	5ccb      	ldrb	r3, [r1, r3]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4bb0      	ldr	r3, [pc, #704]	; (8000d10 <Veri_Bitti+0x698>)
 8000a4e:	801a      	strh	r2, [r3, #0]
				    DATA1 = ( VeriTextRX_Modbus [ ilk_index + 3 ] << 8  )| VeriTextRX_Modbus [ ilk_index + 4 ];
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	3303      	adds	r3, #3
 8000a56:	4aad      	ldr	r2, [pc, #692]	; (8000d0c <Veri_Bitti+0x694>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	3304      	adds	r3, #4
 8000a64:	49a9      	ldr	r1, [pc, #676]	; (8000d0c <Veri_Bitti+0x694>)
 8000a66:	5ccb      	ldrb	r3, [r1, r3]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4ba8      	ldr	r3, [pc, #672]	; (8000d14 <Veri_Bitti+0x69c>)
 8000a72:	801a      	strh	r2, [r3, #0]
				    Veri_Sakla [ DATA ] = DATA1;
 8000a74:	4ba6      	ldr	r3, [pc, #664]	; (8000d10 <Veri_Bitti+0x698>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	001a      	movs	r2, r3
 8000a7a:	4ba6      	ldr	r3, [pc, #664]	; (8000d14 <Veri_Bitti+0x69c>)
 8000a7c:	8819      	ldrh	r1, [r3, #0]
 8000a7e:	4ba6      	ldr	r3, [pc, #664]	; (8000d18 <Veri_Bitti+0x6a0>)
 8000a80:	0052      	lsls	r2, r2, #1
 8000a82:	52d1      	strh	r1, [r2, r3]
				    VeriTextTX [ 0 ] = 41;
 8000a84:	4ba5      	ldr	r3, [pc, #660]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000a86:	2229      	movs	r2, #41	; 0x29
 8000a88:	701a      	strb	r2, [r3, #0]
					VeriTextTX [ 1 ] = 06;
 8000a8a:	4ba4      	ldr	r3, [pc, #656]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000a8c:	2206      	movs	r2, #6
 8000a8e:	705a      	strb	r2, [r3, #1]
					VeriTextTX [ 2 ] = DATA >> 8;
 8000a90:	4b9f      	ldr	r3, [pc, #636]	; (8000d10 <Veri_Bitti+0x698>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4ba0      	ldr	r3, [pc, #640]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000a9c:	709a      	strb	r2, [r3, #2]
					VeriTextTX [ 3 ] = DATA;
 8000a9e:	4b9c      	ldr	r3, [pc, #624]	; (8000d10 <Veri_Bitti+0x698>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b9d      	ldr	r3, [pc, #628]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000aa6:	70da      	strb	r2, [r3, #3]
					DATA1TX 		 = Veri_Sakla [ DATA ];
 8000aa8:	4b99      	ldr	r3, [pc, #612]	; (8000d10 <Veri_Bitti+0x698>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	001a      	movs	r2, r3
 8000aae:	4b9a      	ldr	r3, [pc, #616]	; (8000d18 <Veri_Bitti+0x6a0>)
 8000ab0:	0052      	lsls	r2, r2, #1
 8000ab2:	5ad2      	ldrh	r2, [r2, r3]
 8000ab4:	4b9a      	ldr	r3, [pc, #616]	; (8000d20 <Veri_Bitti+0x6a8>)
 8000ab6:	801a      	strh	r2, [r3, #0]
					VeriTextTX [ 4 ] = DATA1TX >> 8;
 8000ab8:	4b99      	ldr	r3, [pc, #612]	; (8000d20 <Veri_Bitti+0x6a8>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b96      	ldr	r3, [pc, #600]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000ac4:	711a      	strb	r2, [r3, #4]
					VeriTextTX [ 5 ] = DATA1TX ;
 8000ac6:	4b96      	ldr	r3, [pc, #600]	; (8000d20 <Veri_Bitti+0x6a8>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b93      	ldr	r3, [pc, #588]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000ace:	715a      	strb	r2, [r3, #5]
					CrC_kontrol      = 0;
 8000ad0:	4b94      	ldr	r3, [pc, #592]	; (8000d24 <Veri_Bitti+0x6ac>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
					CrC_kontrol      =  ModRTU_CRC(VeriTextTX, 6);
 8000ad6:	4b91      	ldr	r3, [pc, #580]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000ad8:	2106      	movs	r1, #6
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fcc4 	bl	8000468 <ModRTU_CRC>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	4b8f      	ldr	r3, [pc, #572]	; (8000d24 <Veri_Bitti+0x6ac>)
 8000ae6:	801a      	strh	r2, [r3, #0]
					VeriTextTX [ 6 ] = CrC_kontrol & 0xff;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	; (8000d24 <Veri_Bitti+0x6ac>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b8b      	ldr	r3, [pc, #556]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000af0:	719a      	strb	r2, [r3, #6]
					VeriTextTX [ 7 ] = (CrC_kontrol >> 8) & 0xff;
 8000af2:	4b8c      	ldr	r3, [pc, #560]	; (8000d24 <Veri_Bitti+0x6ac>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	0a1b      	lsrs	r3, r3, #8
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b87      	ldr	r3, [pc, #540]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000afe:	71da      	strb	r2, [r3, #7]
					VeriTextTX_index = 7;
 8000b00:	4b89      	ldr	r3, [pc, #548]	; (8000d28 <Veri_Bitti+0x6b0>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	701a      	strb	r2, [r3, #0]
			break;
 8000b06:	e095      	b.n	8000c34 <Veri_Bitti+0x5bc>
						DATA  = ( VeriTextRX_Modbus [ ilk_index + 1 ] << 8 )| VeriTextRX_Modbus [ ilk_index + 2 ];
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4a7f      	ldr	r2, [pc, #508]	; (8000d0c <Veri_Bitti+0x694>)
 8000b10:	5cd3      	ldrb	r3, [r2, r3]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	497b      	ldr	r1, [pc, #492]	; (8000d0c <Veri_Bitti+0x694>)
 8000b1e:	5ccb      	ldrb	r3, [r1, r3]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b79      	ldr	r3, [pc, #484]	; (8000d10 <Veri_Bitti+0x698>)
 8000b2a:	801a      	strh	r2, [r3, #0]
						DATA1 = (VeriTextRX_Modbus [ ilk_index + 3 ] << 8 )  | VeriTextRX_Modbus [ ilk_index + 4 ];
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	3303      	adds	r3, #3
 8000b32:	4a76      	ldr	r2, [pc, #472]	; (8000d0c <Veri_Bitti+0x694>)
 8000b34:	5cd3      	ldrb	r3, [r2, r3]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	4972      	ldr	r1, [pc, #456]	; (8000d0c <Veri_Bitti+0x694>)
 8000b42:	5ccb      	ldrb	r3, [r1, r3]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b71      	ldr	r3, [pc, #452]	; (8000d14 <Veri_Bitti+0x69c>)
 8000b4e:	801a      	strh	r2, [r3, #0]
							for (i = 0 ; i < DATA1*2 ; i+=2)
 8000b50:	4b76      	ldr	r3, [pc, #472]	; (8000d2c <Veri_Bitti+0x6b4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e02a      	b.n	8000bae <Veri_Bitti+0x536>
								Veri_Sakla [ DATA + sayac1 ] = ( VeriTextRX_Modbus [ ilk_index + 6 + i ] << 8 ) | VeriTextRX_Modbus [ ilk_index + 7 + i ] ;
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	3306      	adds	r3, #6
 8000b5e:	4a73      	ldr	r2, [pc, #460]	; (8000d2c <Veri_Bitti+0x6b4>)
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	189b      	adds	r3, r3, r2
 8000b64:	4a69      	ldr	r2, [pc, #420]	; (8000d0c <Veri_Bitti+0x694>)
 8000b66:	5cd3      	ldrb	r3, [r2, r3]
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	3307      	adds	r3, #7
 8000b72:	496e      	ldr	r1, [pc, #440]	; (8000d2c <Veri_Bitti+0x6b4>)
 8000b74:	7809      	ldrb	r1, [r1, #0]
 8000b76:	185b      	adds	r3, r3, r1
 8000b78:	4964      	ldr	r1, [pc, #400]	; (8000d0c <Veri_Bitti+0x694>)
 8000b7a:	5ccb      	ldrb	r3, [r1, r3]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b219      	sxth	r1, r3
 8000b82:	4b63      	ldr	r3, [pc, #396]	; (8000d10 <Veri_Bitti+0x698>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	001a      	movs	r2, r3
 8000b88:	4b69      	ldr	r3, [pc, #420]	; (8000d30 <Veri_Bitti+0x6b8>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	18d2      	adds	r2, r2, r3
 8000b8e:	b289      	uxth	r1, r1
 8000b90:	4b61      	ldr	r3, [pc, #388]	; (8000d18 <Veri_Bitti+0x6a0>)
 8000b92:	0052      	lsls	r2, r2, #1
 8000b94:	52d1      	strh	r1, [r2, r3]
								sayac1++;
 8000b96:	4b66      	ldr	r3, [pc, #408]	; (8000d30 <Veri_Bitti+0x6b8>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b64      	ldr	r3, [pc, #400]	; (8000d30 <Veri_Bitti+0x6b8>)
 8000ba0:	701a      	strb	r2, [r3, #0]
							for (i = 0 ; i < DATA1*2 ; i+=2)
 8000ba2:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <Veri_Bitti+0x6b4>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <Veri_Bitti+0x6b4>)
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <Veri_Bitti+0x6b4>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	4b57      	ldr	r3, [pc, #348]	; (8000d14 <Veri_Bitti+0x69c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dbcc      	blt.n	8000b58 <Veri_Bitti+0x4e0>
							VeriTextTX [ 0 ] = 41;
 8000bbe:	4b57      	ldr	r3, [pc, #348]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000bc0:	2229      	movs	r2, #41	; 0x29
 8000bc2:	701a      	strb	r2, [r3, #0]
							VeriTextTX [ 1 ] = 16;
 8000bc4:	4b55      	ldr	r3, [pc, #340]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	705a      	strb	r2, [r3, #1]
							VeriTextTX [ 2 ] = DATA >> 8;
 8000bca:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <Veri_Bitti+0x698>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b51      	ldr	r3, [pc, #324]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000bd6:	709a      	strb	r2, [r3, #2]
							VeriTextTX [ 3 ] = DATA;
 8000bd8:	4b4d      	ldr	r3, [pc, #308]	; (8000d10 <Veri_Bitti+0x698>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b4f      	ldr	r3, [pc, #316]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000be0:	70da      	strb	r2, [r3, #3]
							VeriTextTX [ 4 ] = DATA1 >> 8;
 8000be2:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <Veri_Bitti+0x69c>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000bee:	711a      	strb	r2, [r3, #4]
							VeriTextTX [ 5 ] = DATA1;
 8000bf0:	4b48      	ldr	r3, [pc, #288]	; (8000d14 <Veri_Bitti+0x69c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000bf8:	715a      	strb	r2, [r3, #5]
							CrC_kontrol      = 0;
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <Veri_Bitti+0x6ac>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	801a      	strh	r2, [r3, #0]
							CrC_kontrol      = ModRTU_CRC( VeriTextTX, 6 );
 8000c00:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000c02:	2106      	movs	r1, #6
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fc2f 	bl	8000468 <ModRTU_CRC>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <Veri_Bitti+0x6ac>)
 8000c10:	801a      	strh	r2, [r3, #0]
							VeriTextTX [ 6 ] =   CrC_kontrol & 0xff;
 8000c12:	4b44      	ldr	r3, [pc, #272]	; (8000d24 <Veri_Bitti+0x6ac>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000c1a:	719a      	strb	r2, [r3, #6]
							VeriTextTX [ 7 ] = ( CrC_kontrol >> 8 ) & 0xff;
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <Veri_Bitti+0x6ac>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <Veri_Bitti+0x6a4>)
 8000c28:	71da      	strb	r2, [r3, #7]
							VeriTextTX_index = 8 ;
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <Veri_Bitti+0x6b0>)
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	701a      	strb	r2, [r3, #0]
			break;
 8000c30:	e000      	b.n	8000c34 <Veri_Bitti+0x5bc>
			break;
 8000c32:	46c0      	nop			; (mov r8, r8)

		}
		for (uint8_t i = 0; i <= 254; i++) {
 8000c34:	230d      	movs	r3, #13
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e00a      	b.n	8000c54 <Veri_Bitti+0x5dc>
					Data_Array[i] = 0;
 8000c3e:	200d      	movs	r0, #13
 8000c40:	183b      	adds	r3, r7, r0
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4a3b      	ldr	r2, [pc, #236]	; (8000d34 <Veri_Bitti+0x6bc>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 254; i++) {
 8000c4a:	183b      	adds	r3, r7, r0
 8000c4c:	781a      	ldrb	r2, [r3, #0]
 8000c4e:	183b      	adds	r3, r7, r0
 8000c50:	3201      	adds	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	230d      	movs	r3, #13
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d1ef      	bne.n	8000c3e <Veri_Bitti+0x5c6>
				}
		for (uint8_t i = 0; i < 16; i++) {
 8000c5e:	230c      	movs	r3, #12
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e00a      	b.n	8000c7e <Veri_Bitti+0x606>
					Data_Array1 [i] = 0;
 8000c68:	200c      	movs	r0, #12
 8000c6a:	183b      	adds	r3, r7, r0
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4a32      	ldr	r2, [pc, #200]	; (8000d38 <Veri_Bitti+0x6c0>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 16; i++) {
 8000c74:	183b      	adds	r3, r7, r0
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	183b      	adds	r3, r7, r0
 8000c7a:	3201      	adds	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	230c      	movs	r3, #12
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d9ef      	bls.n	8000c68 <Veri_Bitti+0x5f0>
				}
		for (uint8_t i = 0; i <= 254; i++) {
 8000c88:	230b      	movs	r3, #11
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e00b      	b.n	8000caa <Veri_Bitti+0x632>
			VeriBilgi_B[i] = 0;
 8000c92:	200b      	movs	r0, #11
 8000c94:	183b      	adds	r3, r7, r0
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <Veri_Bitti+0x6c4>)
 8000c9a:	0052      	lsls	r2, r2, #1
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	52d1      	strh	r1, [r2, r3]
		for (uint8_t i = 0; i <= 254; i++) {
 8000ca0:	183b      	adds	r3, r7, r0
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	183b      	adds	r3, r7, r0
 8000ca6:	3201      	adds	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	230b      	movs	r3, #11
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2bff      	cmp	r3, #255	; 0xff
 8000cb2:	d1ee      	bne.n	8000c92 <Veri_Bitti+0x61a>
		}
		for (uint8_t i = 0; i <= 254; i++) {
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e00a      	b.n	8000cd4 <Veri_Bitti+0x65c>
			VeriTextRX_Modbus[i] = 0;
 8000cbe:	200a      	movs	r0, #10
 8000cc0:	183b      	adds	r3, r7, r0
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <Veri_Bitti+0x694>)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 254; i++) {
 8000cca:	183b      	adds	r3, r7, r0
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	183b      	adds	r3, r7, r0
 8000cd0:	3201      	adds	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2bff      	cmp	r3, #255	; 0xff
 8000cdc:	d1ef      	bne.n	8000cbe <Veri_Bitti+0x646>
		}
		sayac1					= 0;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <Veri_Bitti+0x6b8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
		VeriTextRX_Modbus_index = 0;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <Veri_Bitti+0x6c8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
		VeriTextTX_MC = 0;
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <Veri_Bitti+0x6cc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
 		VeriTextRX_MC = 0;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <Veri_Bitti+0x6d0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
		Veri_Bitti_FS = 0;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <Veri_Bitti+0x6d4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
		VeriTextRX_Modbus_index = 1;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <Veri_Bitti+0x6c8>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOO6_GPIO_Port,GPIOO6_Pin,0);
	}

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	2000023c 	.word	0x2000023c
 8000d10:	2000054a 	.word	0x2000054a
 8000d14:	20000002 	.word	0x20000002
 8000d18:	20000758 	.word	0x20000758
 8000d1c:	20000030 	.word	0x20000030
 8000d20:	20000004 	.word	0x20000004
 8000d24:	2000033e 	.word	0x2000033e
 8000d28:	20000131 	.word	0x20000131
 8000d2c:	2000054c 	.word	0x2000054c
 8000d30:	2000054d 	.word	0x2000054d
 8000d34:	20000558 	.word	0x20000558
 8000d38:	20000658 	.word	0x20000658
 8000d3c:	20000348 	.word	0x20000348
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000130 	.word	0x20000130
 8000d48:	20000238 	.word	0x20000238
 8000d4c:	2000033c 	.word	0x2000033c

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x44>)
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_MspInit+0x44>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	619a      	str	r2, [r3, #24]
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_MspInit+0x44>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	69da      	ldr	r2, [r3, #28]
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_MspInit+0x44>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0549      	lsls	r1, r1, #21
 8000d84:	430a      	orrs	r2, r1
 8000d86:	61da      	str	r2, [r3, #28]
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_MspInit+0x44>)
 8000d8a:	69da      	ldr	r2, [r3, #28]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	055b      	lsls	r3, r3, #21
 8000d90:	4013      	ands	r3, r2
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40021000 	.word	0x40021000

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 f9ac 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f001 fb9c 	bl	8002518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000778 	.word	0x20000778

08000dec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <TIM1_CC_IRQHandler+0x14>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 fb90 	bl	8002518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000778 	.word	0x20000778

08000e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <USART1_IRQHandler+0x14>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 f84c 	bl	8002ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	200007c0 	.word	0x200007c0

08000e1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2e:	2308      	movs	r3, #8
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	0018      	movs	r0, r3
 8000e34:	2310      	movs	r3, #16
 8000e36:	001a      	movs	r2, r3
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f003 fa09 	bl	8004250 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3e:	003b      	movs	r3, r7
 8000e40:	0018      	movs	r0, r3
 8000e42:	2308      	movs	r3, #8
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f003 fa02 	bl	8004250 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e4e:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <MX_TIM1_Init+0xa8>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e54:	2230      	movs	r2, #48	; 0x30
 8000e56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 fa7d 	bl	8002378 <HAL_TIM_Base_Init>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000e82:	f7ff ff65 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e86:	2108      	movs	r1, #8
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	0152      	lsls	r2, r2, #5
 8000e8e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e90:	187a      	adds	r2, r7, r1
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000e94:	0011      	movs	r1, r2
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 fc54 	bl	8002744 <HAL_TIM_ConfigClockSource>
 8000e9c:	1e03      	subs	r3, r0, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ea0:	f7ff ff56 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb0:	003a      	movs	r2, r7
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_TIM1_Init+0xa4>)
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 fe52 	bl	8002b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000ec0:	f7ff ff46 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b006      	add	sp, #24
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000778 	.word	0x20000778
 8000ed0:	40012c00 	.word	0x40012c00

08000ed4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_TIM_Base_MspInit+0x58>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d11d      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_TIM_Base_MspInit+0x5c>)
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_TIM_Base_MspInit+0x5c>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0109      	lsls	r1, r1, #4
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_TIM_Base_MspInit+0x5c>)
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	200d      	movs	r0, #13
 8000f08:	f000 f9d4 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000f0c:	200d      	movs	r0, #13
 8000f0e:	f000 f9e6 	bl	80012de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	200e      	movs	r0, #14
 8000f18:	f000 f9cc 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f1c:	200e      	movs	r0, #14
 8000f1e:	f000 f9de 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40012c00 	.word	0x40012c00
 8000f30:	40021000 	.word	0x40021000

08000f34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MX_USART1_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f40:	2296      	movs	r2, #150	; 0x96
 8000f42:	0192      	lsls	r2, r2, #6
 8000f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f001 fe5f 	bl	8002c3c <HAL_UART_Init>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f7ff fee5 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200007c0 	.word	0x200007c0
 8000f90:	40013800 	.word	0x40013800

08000f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	2414      	movs	r4, #20
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	2314      	movs	r3, #20
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f003 f952 	bl	8004250 <memset>
  if(uartHandle->Instance==USART1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <HAL_UART_MspInit+0xa4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d13b      	bne.n	800102e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_UART_MspInit+0xa8>)
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_UART_MspInit+0xa8>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	01c9      	lsls	r1, r1, #7
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_UART_MspInit+0xa8>)
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	01db      	lsls	r3, r3, #7
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_UART_MspInit+0xa8>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_UART_MspInit+0xa8>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0289      	lsls	r1, r1, #10
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_UART_MspInit+0xa8>)
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	22c0      	movs	r2, #192	; 0xc0
 8000ff2:	00d2      	lsls	r2, r2, #3
 8000ff4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	0021      	movs	r1, r4
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2203      	movs	r2, #3
 8001008:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2201      	movs	r2, #1
 800100e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	187a      	adds	r2, r7, r1
 8001012:	2390      	movs	r3, #144	; 0x90
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f9fb 	bl	8001414 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	201b      	movs	r0, #27
 8001024:	f000 f946 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001028:	201b      	movs	r0, #27
 800102a:	f000 f958 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b00b      	add	sp, #44	; 0x2c
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	40013800 	.word	0x40013800
 800103c:	40021000 	.word	0x40021000

08001040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001042:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800106a:	f7ff fed7 	bl	8000e1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800106e:	f003 f8cb 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001072:	f7ff f8ed 	bl	8000250 <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
  ldr   r0, =_estack
 8001078:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001084:	080042b8 	.word	0x080042b8
  ldr r2, =_sbss
 8001088:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800108c:	20000848 	.word	0x20000848

08001090 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_COMP_IRQHandler>
	...

08001094 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_Init+0x24>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_Init+0x24>)
 800109e:	2110      	movs	r1, #16
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f809 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010aa:	f7ff fe57 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_InitTick+0x5c>)
 80010c6:	681c      	ldr	r4, [r3, #0]
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_InitTick+0x60>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	0019      	movs	r1, r3
 80010ce:	23fa      	movs	r3, #250	; 0xfa
 80010d0:	0098      	lsls	r0, r3, #2
 80010d2:	f7ff f819 	bl	8000108 <__udivsi3>
 80010d6:	0003      	movs	r3, r0
 80010d8:	0019      	movs	r1, r3
 80010da:	0020      	movs	r0, r4
 80010dc:	f7ff f814 	bl	8000108 <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 f90b 	bl	80012fe <HAL_SYSTICK_Config>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e00f      	b.n	8001110 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d80b      	bhi.n	800110e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	2301      	movs	r3, #1
 80010fa:	425b      	negs	r3, r3
 80010fc:	2200      	movs	r2, #0
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 f8d8 	bl	80012b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_InitTick+0x64>)
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b003      	add	sp, #12
 8001116:	bd90      	pop	{r4, r7, pc}
 8001118:	20000008 	.word	0x20000008
 800111c:	20000010 	.word	0x20000010
 8001120:	2000000c 	.word	0x2000000c

08001124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	001a      	movs	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	18d2      	adds	r2, r2, r3
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_IncTick+0x20>)
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	20000010 	.word	0x20000010
 8001144:	20000844 	.word	0x20000844

08001148 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000844 	.word	0x20000844

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	0002      	movs	r2, r0
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b7f      	cmp	r3, #127	; 0x7f
 800116e:	d809      	bhi.n	8001184 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	001a      	movs	r2, r3
 8001176:	231f      	movs	r3, #31
 8001178:	401a      	ands	r2, r3
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_EnableIRQ+0x30>)
 800117c:	2101      	movs	r1, #1
 800117e:	4091      	lsls	r1, r2
 8001180:	000a      	movs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
  }
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	0002      	movs	r2, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b7f      	cmp	r3, #127	; 0x7f
 80011a4:	d828      	bhi.n	80011f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a6:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <__NVIC_SetPriority+0xd4>)
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	33c0      	adds	r3, #192	; 0xc0
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	589b      	ldr	r3, [r3, r2]
 80011b6:	1dfa      	adds	r2, r7, #7
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	0011      	movs	r1, r2
 80011bc:	2203      	movs	r2, #3
 80011be:	400a      	ands	r2, r1
 80011c0:	00d2      	lsls	r2, r2, #3
 80011c2:	21ff      	movs	r1, #255	; 0xff
 80011c4:	4091      	lsls	r1, r2
 80011c6:	000a      	movs	r2, r1
 80011c8:	43d2      	mvns	r2, r2
 80011ca:	401a      	ands	r2, r3
 80011cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	22ff      	movs	r2, #255	; 0xff
 80011d4:	401a      	ands	r2, r3
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0018      	movs	r0, r3
 80011dc:	2303      	movs	r3, #3
 80011de:	4003      	ands	r3, r0
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e4:	481f      	ldr	r0, [pc, #124]	; (8001264 <__NVIC_SetPriority+0xd4>)
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	430a      	orrs	r2, r1
 80011f0:	33c0      	adds	r3, #192	; 0xc0
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011f6:	e031      	b.n	800125c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <__NVIC_SetPriority+0xd8>)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0019      	movs	r1, r3
 8001200:	230f      	movs	r3, #15
 8001202:	400b      	ands	r3, r1
 8001204:	3b08      	subs	r3, #8
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3306      	adds	r3, #6
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1dfa      	adds	r2, r7, #7
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	0011      	movs	r1, r2
 8001218:	2203      	movs	r2, #3
 800121a:	400a      	ands	r2, r1
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	21ff      	movs	r1, #255	; 0xff
 8001220:	4091      	lsls	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	43d2      	mvns	r2, r2
 8001226:	401a      	ands	r2, r3
 8001228:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	401a      	ands	r2, r3
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	0018      	movs	r0, r3
 8001238:	2303      	movs	r3, #3
 800123a:	4003      	ands	r3, r0
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <__NVIC_SetPriority+0xd8>)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	001c      	movs	r4, r3
 8001248:	230f      	movs	r3, #15
 800124a:	4023      	ands	r3, r4
 800124c:	3b08      	subs	r3, #8
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	430a      	orrs	r2, r1
 8001252:	3306      	adds	r3, #6
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	18c3      	adds	r3, r0, r3
 8001258:	3304      	adds	r3, #4
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b003      	add	sp, #12
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	045b      	lsls	r3, r3, #17
 800127c:	429a      	cmp	r2, r3
 800127e:	d301      	bcc.n	8001284 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001280:	2301      	movs	r3, #1
 8001282:	e010      	b.n	80012a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <SysTick_Config+0x44>)
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	3a01      	subs	r2, #1
 800128a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128c:	2301      	movs	r3, #1
 800128e:	425b      	negs	r3, r3
 8001290:	2103      	movs	r1, #3
 8001292:	0018      	movs	r0, r3
 8001294:	f7ff ff7c 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x44>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x44>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	210f      	movs	r1, #15
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	1c02      	adds	r2, r0, #0
 80012c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff5d 	bl	8001190 <__NVIC_SetPriority>
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	0002      	movs	r2, r0
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff33 	bl	800115c <__NVIC_EnableIRQ>
}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ffaf 	bl	800126c <SysTick_Config>
 800130e:	0003      	movs	r3, r0
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2221      	movs	r2, #33	; 0x21
 8001324:	5c9b      	ldrb	r3, [r3, r2]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d008      	beq.n	800133e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	2100      	movs	r1, #0
 8001338:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e020      	b.n	8001380 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	210e      	movs	r1, #14
 800134a:	438a      	bics	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	438a      	bics	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001366:	2101      	movs	r1, #1
 8001368:	4091      	lsls	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2221      	movs	r2, #33	; 0x21
 8001372:	2101      	movs	r1, #1
 8001374:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2220      	movs	r2, #32
 800137a:	2100      	movs	r1, #0
 800137c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001390:	210f      	movs	r1, #15
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2221      	movs	r2, #33	; 0x21
 800139c:	5c9b      	ldrb	r3, [r3, r2]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d006      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2204      	movs	r2, #4
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e028      	b.n	8001404 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	210e      	movs	r1, #14
 80013be:	438a      	bics	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	438a      	bics	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013da:	2101      	movs	r1, #1
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2221      	movs	r2, #33	; 0x21
 80013e6:	2101      	movs	r1, #1
 80013e8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2220      	movs	r2, #32
 80013ee:	2100      	movs	r1, #0
 80013f0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	0010      	movs	r0, r2
 8001402:	4798      	blx	r3
    } 
  }
  return status;
 8001404:	230f      	movs	r3, #15
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	781b      	ldrb	r3, [r3, #0]
}
 800140a:	0018      	movs	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e155      	b.n	80016d0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4091      	lsls	r1, r2
 800142e:	000a      	movs	r2, r1
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d100      	bne.n	800143c <HAL_GPIO_Init+0x28>
 800143a:	e146      	b.n	80016ca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	4013      	ands	r3, r2
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001450:	2b02      	cmp	r3, #2
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	2201      	movs	r2, #1
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	4013      	ands	r3, r2
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d017      	beq.n	80014f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d123      	bne.n	8001546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	58d3      	ldr	r3, [r2, r3]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2207      	movs	r2, #7
 8001510:	4013      	ands	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2107      	movs	r1, #7
 800152a:	400b      	ands	r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	08da      	lsrs	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	6939      	ldr	r1, [r7, #16]
 8001544:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	401a      	ands	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	23c0      	movs	r3, #192	; 0xc0
 8001580:	029b      	lsls	r3, r3, #10
 8001582:	4013      	ands	r3, r2
 8001584:	d100      	bne.n	8001588 <HAL_GPIO_Init+0x174>
 8001586:	e0a0      	b.n	80016ca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001588:	4b57      	ldr	r3, [pc, #348]	; (80016e8 <HAL_GPIO_Init+0x2d4>)
 800158a:	699a      	ldr	r2, [r3, #24]
 800158c:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <HAL_GPIO_Init+0x2d4>)
 800158e:	2101      	movs	r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <HAL_GPIO_Init+0x2d4>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a0:	4a52      	ldr	r2, [pc, #328]	; (80016ec <HAL_GPIO_Init+0x2d8>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	589b      	ldr	r3, [r3, r2]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2203      	movs	r2, #3
 80015b2:	4013      	ands	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	43da      	mvns	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	2390      	movs	r3, #144	; 0x90
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d019      	beq.n	8001602 <HAL_GPIO_Init+0x1ee>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0x1ea>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a46      	ldr	r2, [pc, #280]	; (80016f4 <HAL_GPIO_Init+0x2e0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00d      	beq.n	80015fa <HAL_GPIO_Init+0x1e6>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a45      	ldr	r2, [pc, #276]	; (80016f8 <HAL_GPIO_Init+0x2e4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x1e2>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a44      	ldr	r2, [pc, #272]	; (80016fc <HAL_GPIO_Init+0x2e8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_GPIO_Init+0x1de>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x1f0>
 80015f2:	2305      	movs	r3, #5
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x1f0>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x1f0>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x1f0>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x1f0>
 8001602:	2300      	movs	r3, #0
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	2103      	movs	r1, #3
 8001608:	400a      	ands	r2, r1
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001614:	4935      	ldr	r1, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x2d8>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43da      	mvns	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	4013      	ands	r3, r2
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43da      	mvns	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	029b      	lsls	r3, r3, #10
 8001664:	4013      	ands	r3, r2
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	035b      	lsls	r3, r3, #13
 800168e:	4013      	ands	r3, r2
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43da      	mvns	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	039b      	lsls	r3, r3, #14
 80016b8:	4013      	ands	r3, r2
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	40da      	lsrs	r2, r3
 80016d8:	1e13      	subs	r3, r2, #0
 80016da:	d000      	beq.n	80016de <HAL_GPIO_Init+0x2ca>
 80016dc:	e6a2      	b.n	8001424 <HAL_GPIO_Init+0x10>
  } 
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b006      	add	sp, #24
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000
 80016f0:	48000400 	.word	0x48000400
 80016f4:	48000800 	.word	0x48000800
 80016f8:	48000c00 	.word	0x48000c00
 80016fc:	48001000 	.word	0x48001000
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	000a      	movs	r2, r1
 800170e:	1cbb      	adds	r3, r7, #2
 8001710:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	1cba      	adds	r2, r7, #2
 8001718:	8812      	ldrh	r2, [r2, #0]
 800171a:	4013      	ands	r3, r2
 800171c:	d004      	beq.n	8001728 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800171e:	230f      	movs	r3, #15
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	e003      	b.n	8001730 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001728:	230f      	movs	r3, #15
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001730:	230f      	movs	r3, #15
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	781b      	ldrb	r3, [r3, #0]
  }
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	0008      	movs	r0, r1
 8001748:	0011      	movs	r1, r2
 800174a:	1cbb      	adds	r3, r7, #2
 800174c:	1c02      	adds	r2, r0, #0
 800174e:	801a      	strh	r2, [r3, #0]
 8001750:	1c7b      	adds	r3, r7, #1
 8001752:	1c0a      	adds	r2, r1, #0
 8001754:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001756:	1c7b      	adds	r3, r7, #1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800175e:	1cbb      	adds	r3, r7, #2
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001766:	e003      	b.n	8001770 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001768:	1cbb      	adds	r3, r7, #2
 800176a:	881a      	ldrh	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	f000 fb76 	bl	8001e78 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	d100      	bne.n	8001798 <HAL_RCC_OscConfig+0x20>
 8001796:	e08e      	b.n	80018b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001798:	4bc5      	ldr	r3, [pc, #788]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	220c      	movs	r2, #12
 800179e:	4013      	ands	r3, r2
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d00e      	beq.n	80017c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a4:	4bc2      	ldr	r3, [pc, #776]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	220c      	movs	r2, #12
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d117      	bne.n	80017e0 <HAL_RCC_OscConfig+0x68>
 80017b0:	4bbf      	ldr	r3, [pc, #764]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	23c0      	movs	r3, #192	; 0xc0
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	401a      	ands	r2, r3
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	025b      	lsls	r3, r3, #9
 80017be:	429a      	cmp	r2, r3
 80017c0:	d10e      	bne.n	80017e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	4bbb      	ldr	r3, [pc, #748]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	029b      	lsls	r3, r3, #10
 80017ca:	4013      	ands	r3, r2
 80017cc:	d100      	bne.n	80017d0 <HAL_RCC_OscConfig+0x58>
 80017ce:	e071      	b.n	80018b4 <HAL_RCC_OscConfig+0x13c>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d000      	beq.n	80017da <HAL_RCC_OscConfig+0x62>
 80017d8:	e06c      	b.n	80018b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	f000 fb4c 	bl	8001e78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x80>
 80017e8:	4bb1      	ldr	r3, [pc, #708]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4bb0      	ldr	r3, [pc, #704]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	0249      	lsls	r1, r1, #9
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e02f      	b.n	8001858 <HAL_RCC_OscConfig+0xe0>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10c      	bne.n	800181a <HAL_RCC_OscConfig+0xa2>
 8001800:	4bab      	ldr	r3, [pc, #684]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4baa      	ldr	r3, [pc, #680]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001806:	49ab      	ldr	r1, [pc, #684]	; (8001ab4 <HAL_RCC_OscConfig+0x33c>)
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	4ba8      	ldr	r3, [pc, #672]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4ba7      	ldr	r3, [pc, #668]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001812:	49a9      	ldr	r1, [pc, #676]	; (8001ab8 <HAL_RCC_OscConfig+0x340>)
 8001814:	400a      	ands	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	e01e      	b.n	8001858 <HAL_RCC_OscConfig+0xe0>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d10e      	bne.n	8001840 <HAL_RCC_OscConfig+0xc8>
 8001822:	4ba3      	ldr	r3, [pc, #652]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4ba2      	ldr	r3, [pc, #648]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	02c9      	lsls	r1, r1, #11
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	4b9f      	ldr	r3, [pc, #636]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b9e      	ldr	r3, [pc, #632]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	0249      	lsls	r1, r1, #9
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0xe0>
 8001840:	4b9b      	ldr	r3, [pc, #620]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b9a      	ldr	r3, [pc, #616]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001846:	499b      	ldr	r1, [pc, #620]	; (8001ab4 <HAL_RCC_OscConfig+0x33c>)
 8001848:	400a      	ands	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4b98      	ldr	r3, [pc, #608]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001852:	4999      	ldr	r1, [pc, #612]	; (8001ab8 <HAL_RCC_OscConfig+0x340>)
 8001854:	400a      	ands	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d014      	beq.n	800188a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fc72 	bl	8001148 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186a:	f7ff fc6d 	bl	8001148 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	; 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e2fd      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187c:	4b8c      	ldr	r3, [pc, #560]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	4013      	ands	r3, r2
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0xf2>
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fc5d 	bl	8001148 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fc58 	bl	8001148 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e2e8      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b82      	ldr	r3, [pc, #520]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	029b      	lsls	r3, r3, #10
 80018ae:	4013      	ands	r3, r2
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x11c>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d100      	bne.n	80018c2 <HAL_RCC_OscConfig+0x14a>
 80018c0:	e06c      	b.n	800199c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018c2:	4b7b      	ldr	r3, [pc, #492]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	220c      	movs	r2, #12
 80018c8:	4013      	ands	r3, r2
 80018ca:	d00e      	beq.n	80018ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018cc:	4b78      	ldr	r3, [pc, #480]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	220c      	movs	r2, #12
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d11f      	bne.n	8001918 <HAL_RCC_OscConfig+0x1a0>
 80018d8:	4b75      	ldr	r3, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	23c0      	movs	r3, #192	; 0xc0
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	401a      	ands	r2, r3
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d116      	bne.n	8001918 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	4b71      	ldr	r3, [pc, #452]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_OscConfig+0x188>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e2bb      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b6b      	ldr	r3, [pc, #428]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	22f8      	movs	r2, #248	; 0xf8
 8001906:	4393      	bics	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00da      	lsls	r2, r3, #3
 8001910:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e041      	b.n	800199c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d024      	beq.n	800196a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001926:	2101      	movs	r1, #1
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fc0c 	bl	8001148 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff fc07 	bl	8001148 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e297      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d0f1      	beq.n	8001936 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	22f8      	movs	r2, #248	; 0xf8
 8001958:	4393      	bics	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	00da      	lsls	r2, r3, #3
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e018      	b.n	800199c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196a:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001970:	2101      	movs	r1, #1
 8001972:	438a      	bics	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fbe7 	bl	8001148 <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff fbe2 	bl	8001148 <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e272      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d1f1      	bne.n	8001980 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2208      	movs	r2, #8
 80019a2:	4013      	ands	r3, r2
 80019a4:	d036      	beq.n	8001a14 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d019      	beq.n	80019e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ae:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80019b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fbc5 	bl	8001148 <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fbc0 	bl	8001148 <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e250      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2202      	movs	r2, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d0f1      	beq.n	80019c4 <HAL_RCC_OscConfig+0x24c>
 80019e0:	e018      	b.n	8001a14 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80019e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	438a      	bics	r2, r1
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fbab 	bl	8001148 <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fba6 	bl	8001148 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e236      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d1f1      	bne.n	80019f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d100      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2a8>
 8001a1e:	e0b5      	b.n	8001b8c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a20:	201f      	movs	r0, #31
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	055b      	lsls	r3, r3, #21
 8001a30:	4013      	ands	r3, r2
 8001a32:	d110      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a36:	69da      	ldr	r2, [r3, #28]
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	0549      	lsls	r1, r1, #21
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	61da      	str	r2, [r3, #28]
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	055b      	lsls	r3, r3, #21
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a50:	183b      	adds	r3, r7, r0
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_RCC_OscConfig+0x344>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d11a      	bne.n	8001a98 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_RCC_OscConfig+0x344>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_RCC_OscConfig+0x344>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0049      	lsls	r1, r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fb6a 	bl	8001148 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff fb65 	bl	8001148 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1f5      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x344>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x348>
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001aa2:	6a1a      	ldr	r2, [r3, #32]
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	621a      	str	r2, [r3, #32]
 8001aac:	e036      	b.n	8001b1c <HAL_RCC_OscConfig+0x3a4>
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	fffeffff 	.word	0xfffeffff
 8001ab8:	fffbffff 	.word	0xfffbffff
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x36a>
 8001ac8:	4bca      	ldr	r3, [pc, #808]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001aca:	6a1a      	ldr	r2, [r3, #32]
 8001acc:	4bc9      	ldr	r3, [pc, #804]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	621a      	str	r2, [r3, #32]
 8001ad4:	4bc7      	ldr	r3, [pc, #796]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	4bc6      	ldr	r3, [pc, #792]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001ada:	2104      	movs	r1, #4
 8001adc:	438a      	bics	r2, r1
 8001ade:	621a      	str	r2, [r3, #32]
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x3a4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x38c>
 8001aea:	4bc2      	ldr	r3, [pc, #776]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	4bc1      	ldr	r3, [pc, #772]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001af0:	2104      	movs	r1, #4
 8001af2:	430a      	orrs	r2, r1
 8001af4:	621a      	str	r2, [r3, #32]
 8001af6:	4bbf      	ldr	r3, [pc, #764]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001af8:	6a1a      	ldr	r2, [r3, #32]
 8001afa:	4bbe      	ldr	r3, [pc, #760]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001afc:	2101      	movs	r1, #1
 8001afe:	430a      	orrs	r2, r1
 8001b00:	621a      	str	r2, [r3, #32]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0x3a4>
 8001b04:	4bbb      	ldr	r3, [pc, #748]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001b06:	6a1a      	ldr	r2, [r3, #32]
 8001b08:	4bba      	ldr	r3, [pc, #744]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	621a      	str	r2, [r3, #32]
 8001b10:	4bb8      	ldr	r3, [pc, #736]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	4bb7      	ldr	r3, [pc, #732]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001b16:	2104      	movs	r1, #4
 8001b18:	438a      	bics	r2, r1
 8001b1a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d014      	beq.n	8001b4e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7ff fb10 	bl	8001148 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	e009      	b.n	8001b42 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff fb0b 	bl	8001148 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	4aaf      	ldr	r2, [pc, #700]	; (8001df8 <HAL_RCC_OscConfig+0x680>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e19a      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	4bac      	ldr	r3, [pc, #688]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3b6>
 8001b4c:	e013      	b.n	8001b76 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fafb 	bl	8001148 <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	e009      	b.n	8001b6c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff faf6 	bl	8001148 <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	4aa5      	ldr	r2, [pc, #660]	; (8001df8 <HAL_RCC_OscConfig+0x680>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e185      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	4ba1      	ldr	r3, [pc, #644]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b76:	231f      	movs	r3, #31
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b9c      	ldr	r3, [pc, #624]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	69da      	ldr	r2, [r3, #28]
 8001b84:	4b9b      	ldr	r3, [pc, #620]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	499d      	ldr	r1, [pc, #628]	; (8001dfc <HAL_RCC_OscConfig+0x684>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2210      	movs	r2, #16
 8001b92:	4013      	ands	r3, r2
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d12a      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b9e:	4b95      	ldr	r3, [pc, #596]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba2:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001baa:	4b92      	ldr	r3, [pc, #584]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bae:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fac7 	bl	8001148 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bc0:	f7ff fac2 	bl	8001148 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e152      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bd2:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d0f1      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bdc:	4b85      	ldr	r3, [pc, #532]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	22f8      	movs	r2, #248	; 0xf8
 8001be2:	4393      	bics	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	00da      	lsls	r2, r3, #3
 8001bec:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf2:	e034      	b.n	8001c5e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	3305      	adds	r3, #5
 8001bfa:	d111      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bfc:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c00:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c02:	2104      	movs	r1, #4
 8001c04:	438a      	bics	r2, r1
 8001c06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c08:	4b7a      	ldr	r3, [pc, #488]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	22f8      	movs	r2, #248	; 0xf8
 8001c0e:	4393      	bics	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	00da      	lsls	r2, r3, #3
 8001c18:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1e:	e01e      	b.n	8001c5e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c20:	4b74      	ldr	r3, [pc, #464]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c24:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c26:	2104      	movs	r1, #4
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c2c:	4b71      	ldr	r3, [pc, #452]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c30:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	438a      	bics	r2, r1
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7ff fa86 	bl	8001148 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c42:	f7ff fa81 	bl	8001148 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e111      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c54:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d1f1      	bne.n	8001c42 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2220      	movs	r2, #32
 8001c64:	4013      	ands	r3, r2
 8001c66:	d05c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c68:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b0c      	cmp	r3, #12
 8001c72:	d00e      	beq.n	8001c92 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c74:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	220c      	movs	r2, #12
 8001c7a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d114      	bne.n	8001caa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c80:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	23c0      	movs	r3, #192	; 0xc0
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	401a      	ands	r2, r3
 8001c8a:	23c0      	movs	r3, #192	; 0xc0
 8001c8c:	025b      	lsls	r3, r3, #9
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d10b      	bne.n	8001caa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c92:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	025b      	lsls	r3, r3, #9
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d040      	beq.n	8001d20 <HAL_RCC_OscConfig+0x5a8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d03c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0e6      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01b      	beq.n	8001cea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001cb2:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb6:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0249      	lsls	r1, r1, #9
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fa42 	bl	8001148 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cca:	f7ff fa3d 	bl	8001148 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0cd      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cdc:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x552>
 8001ce8:	e01b      	b.n	8001d22 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001cea:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cee:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001cf0:	4943      	ldr	r1, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x688>)
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fa27 	bl	8001148 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d00:	f7ff fa22 	bl	8001148 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0b2      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	025b      	lsls	r3, r3, #9
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x588>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d20:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d100      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5b4>
 8001d2a:	e0a4      	b.n	8001e76 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2c:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	220c      	movs	r2, #12
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d100      	bne.n	8001d3a <HAL_RCC_OscConfig+0x5c2>
 8001d38:	e078      	b.n	8001e2c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d14c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001d48:	492e      	ldr	r1, [pc, #184]	; (8001e04 <HAL_RCC_OscConfig+0x68c>)
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff f9fb 	bl	8001148 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff f9f6 	bl	8001148 <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e086      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	049b      	lsls	r3, r3, #18
 8001d72:	4013      	ands	r3, r2
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_RCC_OscConfig+0x690>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	0449      	lsls	r1, r1, #17
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff f9c9 	bl	8001148 <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f9c4 	bl	8001148 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e054      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	049b      	lsls	r3, r3, #18
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x644>
 8001dda:	e04c      	b.n	8001e76 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_RCC_OscConfig+0x67c>)
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <HAL_RCC_OscConfig+0x68c>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f9ae 	bl	8001148 <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x6a6>
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000
 8001df8:	00001388 	.word	0x00001388
 8001dfc:	efffffff 	.word	0xefffffff
 8001e00:	fffeffff 	.word	0xfffeffff
 8001e04:	feffffff 	.word	0xfeffffff
 8001e08:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff f99c 	bl	8001148 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e02c      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_RCC_OscConfig+0x708>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	049b      	lsls	r3, r3, #18
 8001e26:	4013      	ands	r3, r2
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x694>
 8001e2a:	e024      	b.n	8001e76 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e01f      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_OscConfig+0x708>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x708>)
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10e      	bne.n	8001e72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	220f      	movs	r2, #15
 8001e58:	401a      	ands	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	23f0      	movs	r3, #240	; 0xf0
 8001e66:	039b      	lsls	r3, r3, #14
 8001e68:	401a      	ands	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	0018      	movs	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b008      	add	sp, #32
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0bf      	b.n	8002018 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b61      	ldr	r3, [pc, #388]	; (8002020 <HAL_RCC_ClockConfig+0x19c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d911      	bls.n	8001eca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b5e      	ldr	r3, [pc, #376]	; (8002020 <HAL_RCC_ClockConfig+0x19c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4393      	bics	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <HAL_RCC_ClockConfig+0x19c>)
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_RCC_ClockConfig+0x19c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0a6      	b.n	8002018 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d015      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	4013      	ands	r3, r2
 8001edc:	d006      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ede:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee4:	21e0      	movs	r1, #224	; 0xe0
 8001ee6:	00c9      	lsls	r1, r1, #3
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	22f0      	movs	r2, #240	; 0xf0
 8001ef2:	4393      	bics	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	d04c      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b44      	ldr	r3, [pc, #272]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	029b      	lsls	r3, r3, #10
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d120      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07a      	b.n	8002018 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	049b      	lsls	r3, r3, #18
 8001f32:	4013      	ands	r3, r2
 8001f34:	d114      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06e      	b.n	8002018 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	025b      	lsls	r3, r3, #9
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e062      	b.n	8002018 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b34      	ldr	r3, [pc, #208]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e05b      	b.n	8002018 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	4393      	bics	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f8e8 	bl	8001148 <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7c:	e009      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7e:	f7ff f8e3 	bl	8001148 <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <HAL_RCC_ClockConfig+0x1a4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e042      	b.n	8002018 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	220c      	movs	r2, #12
 8001f98:	401a      	ands	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1ec      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_RCC_ClockConfig+0x19c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d211      	bcs.n	8001fd6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_RCC_ClockConfig+0x19c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_RCC_ClockConfig+0x19c>)
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_RCC_ClockConfig+0x19c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e020      	b.n	8002018 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_RCC_ClockConfig+0x1a8>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ff4:	f000 f820 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff8:	0001      	movs	r1, r0
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_RCC_ClockConfig+0x1a0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	220f      	movs	r2, #15
 8002002:	4013      	ands	r3, r2
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x1ac>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	000a      	movs	r2, r1
 800200a:	40da      	lsrs	r2, r3
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1b0>)
 800200e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002010:	2003      	movs	r0, #3
 8002012:	f7ff f853 	bl	80010bc <HAL_InitTick>
  
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b004      	add	sp, #16
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40022000 	.word	0x40022000
 8002024:	40021000 	.word	0x40021000
 8002028:	00001388 	.word	0x00001388
 800202c:	fffff8ff 	.word	0xfffff8ff
 8002030:	08004298 	.word	0x08004298
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b08f      	sub	sp, #60	; 0x3c
 800203c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800203e:	2314      	movs	r3, #20
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	4a38      	ldr	r2, [pc, #224]	; (8002124 <HAL_RCC_GetSysClockFreq+0xec>)
 8002044:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002046:	c313      	stmia	r3!, {r0, r1, r4}
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4a36      	ldr	r2, [pc, #216]	; (8002128 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002050:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002052:	c313      	stmia	r3!, {r0, r1, r4}
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002060:	2300      	movs	r3, #0
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800206c:	4b2f      	ldr	r3, [pc, #188]	; (800212c <HAL_RCC_GetSysClockFreq+0xf4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	220c      	movs	r2, #12
 8002076:	4013      	ands	r3, r2
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d047      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0xd4>
 800207c:	d849      	bhi.n	8002112 <HAL_RCC_GetSysClockFreq+0xda>
 800207e:	2b04      	cmp	r3, #4
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x50>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x56>
 8002086:	e044      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800208c:	e044      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002090:	0c9b      	lsrs	r3, r3, #18
 8002092:	220f      	movs	r2, #15
 8002094:	4013      	ands	r3, r2
 8002096:	2214      	movs	r2, #20
 8002098:	18ba      	adds	r2, r7, r2
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800209e:	4b23      	ldr	r3, [pc, #140]	; (800212c <HAL_RCC_GetSysClockFreq+0xf4>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	220f      	movs	r2, #15
 80020a4:	4013      	ands	r3, r2
 80020a6:	1d3a      	adds	r2, r7, #4
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ae:	23c0      	movs	r3, #192	; 0xc0
 80020b0:	025b      	lsls	r3, r3, #9
 80020b2:	401a      	ands	r2, r3
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	025b      	lsls	r3, r3, #9
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d109      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020be:	481c      	ldr	r0, [pc, #112]	; (8002130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c0:	f7fe f822 	bl	8000108 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	001a      	movs	r2, r3
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	4353      	muls	r3, r2
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
 80020ce:	e01a      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80020d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	025b      	lsls	r3, r3, #9
 80020d6:	401a      	ands	r2, r3
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	025b      	lsls	r3, r3, #9
 80020dc:	429a      	cmp	r2, r3
 80020de:	d109      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020e4:	f7fe f810 	bl	8000108 <__udivsi3>
 80020e8:	0003      	movs	r3, r0
 80020ea:	001a      	movs	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	4353      	muls	r3, r2
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
 80020f2:	e008      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f6:	4810      	ldr	r0, [pc, #64]	; (8002138 <HAL_RCC_GetSysClockFreq+0x100>)
 80020f8:	f7fe f806 	bl	8000108 <__udivsi3>
 80020fc:	0003      	movs	r3, r0
 80020fe:	001a      	movs	r2, r3
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	4353      	muls	r3, r2
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800210a:	e005      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_GetSysClockFreq+0xfc>)
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002110:	e002      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_GetSysClockFreq+0x100>)
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002116:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b00f      	add	sp, #60	; 0x3c
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	08004278 	.word	0x08004278
 8002128:	08004288 	.word	0x08004288
 800212c:	40021000 	.word	0x40021000
 8002130:	01e84800 	.word	0x01e84800
 8002134:	02dc6c00 	.word	0x02dc6c00
 8002138:	007a1200 	.word	0x007a1200

0800213c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <HAL_RCC_GetHCLKFreq+0x10>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	20000008 	.word	0x20000008

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002154:	f7ff fff2 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002158:	0001      	movs	r1, r0
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	2207      	movs	r2, #7
 8002162:	4013      	ands	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	40d9      	lsrs	r1, r3
 800216a:	000b      	movs	r3, r1
}    
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	40021000 	.word	0x40021000
 8002178:	080042a8 	.word	0x080042a8

0800217c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	025b      	lsls	r3, r3, #9
 8002194:	4013      	ands	r3, r2
 8002196:	d100      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002198:	e08e      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800219a:	2017      	movs	r0, #23
 800219c:	183b      	adds	r3, r7, r0
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a2:	4b6e      	ldr	r3, [pc, #440]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	4013      	ands	r3, r2
 80021ac:	d110      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b6b      	ldr	r3, [pc, #428]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0549      	lsls	r1, r1, #21
 80021b8:	430a      	orrs	r2, r1
 80021ba:	61da      	str	r2, [r3, #28]
 80021bc:	4b67      	ldr	r3, [pc, #412]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	055b      	lsls	r3, r3, #21
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d11a      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021dc:	4b60      	ldr	r3, [pc, #384]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b5f      	ldr	r3, [pc, #380]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0049      	lsls	r1, r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7fe ffad 	bl	8001148 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	e008      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7fe ffa8 	bl	8001148 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e0a6      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b56      	ldr	r3, [pc, #344]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4013      	ands	r3, r2
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002212:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	23c0      	movs	r3, #192	; 0xc0
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d034      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	23c0      	movs	r3, #192	; 0xc0
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4013      	ands	r3, r2
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d02c      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002234:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800223a:	4013      	ands	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0249      	lsls	r1, r1, #9
 8002248:	430a      	orrs	r2, r1
 800224a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800224c:	4b43      	ldr	r3, [pc, #268]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002252:	4945      	ldr	r1, [pc, #276]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002254:	400a      	ands	r2, r1
 8002256:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe ff6f 	bl	8001148 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	e009      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe ff6a 	bl	8001148 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	4a3c      	ldr	r2, [pc, #240]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e067      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	2202      	movs	r2, #2
 800228a:	4013      	ands	r3, r2
 800228c:	d0f0      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002294:	4013      	ands	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022a2:	2317      	movs	r3, #23
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b2:	492f      	ldr	r1, [pc, #188]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	2203      	movs	r2, #3
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d2:	430a      	orrs	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2202      	movs	r2, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a23      	ldr	r2, [pc, #140]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022f0:	430a      	orrs	r2, r1
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2220      	movs	r2, #32
 80022fa:	4013      	ands	r3, r2
 80022fc:	d009      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	2210      	movs	r2, #16
 8002304:	4393      	bics	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800230e:	430a      	orrs	r2, r1
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	4013      	ands	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	4393      	bics	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800232e:	430a      	orrs	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4013      	ands	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	4393      	bics	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800234e:	430a      	orrs	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b006      	add	sp, #24
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	fffffcff 	.word	0xfffffcff
 8002368:	fffeffff 	.word	0xfffeffff
 800236c:	00001388 	.word	0x00001388
 8002370:	efffffff 	.word	0xefffffff
 8002374:	fffcffff 	.word	0xfffcffff

08002378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e042      	b.n	8002410 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	223d      	movs	r2, #61	; 0x3d
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	223c      	movs	r2, #60	; 0x3c
 800239a:	2100      	movs	r1, #0
 800239c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7fe fd97 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	223d      	movs	r2, #61	; 0x3d
 80023aa:	2102      	movs	r1, #2
 80023ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	0019      	movs	r1, r3
 80023b8:	0010      	movs	r0, r2
 80023ba:	f000 fab7 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2246      	movs	r2, #70	; 0x46
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	223e      	movs	r2, #62	; 0x3e
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	223f      	movs	r2, #63	; 0x3f
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2241      	movs	r2, #65	; 0x41
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2242      	movs	r2, #66	; 0x42
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2243      	movs	r2, #67	; 0x43
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2244      	movs	r2, #68	; 0x44
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2245      	movs	r2, #69	; 0x45
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	223d      	movs	r2, #61	; 0x3d
 800240a:	2101      	movs	r1, #1
 800240c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	223d      	movs	r2, #61	; 0x3d
 8002424:	5c9b      	ldrb	r3, [r3, r2]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d001      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e03b      	b.n	80024a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	223d      	movs	r2, #61	; 0x3d
 8002434:	2102      	movs	r1, #2
 8002436:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_TIM_Base_Start_IT+0x98>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00f      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x5a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	05db      	lsls	r3, r3, #23
 800245a:	429a      	cmp	r2, r3
 800245c:	d009      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x5a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x5a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d111      	bne.n	8002496 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2207      	movs	r2, #7
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b06      	cmp	r3, #6
 8002482:	d010      	beq.n	80024a6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	e007      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40014000 	.word	0x40014000

080024bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2101      	movs	r1, #1
 80024d0:	438a      	bics	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_TIM_Base_Stop_IT+0x54>)
 80024dc:	4013      	ands	r3, r2
 80024de:	d10d      	bne.n	80024fc <HAL_TIM_Base_Stop_IT+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <HAL_TIM_Base_Stop_IT+0x58>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_Base_Stop_IT+0x40>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2101      	movs	r1, #1
 80024f8:	438a      	bics	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	223d      	movs	r2, #61	; 0x3d
 8002500:	2101      	movs	r1, #1
 8002502:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	00001111 	.word	0x00001111
 8002514:	00000444 	.word	0x00000444

08002518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d124      	bne.n	8002578 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2202      	movs	r2, #2
 8002536:	4013      	ands	r3, r2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d11d      	bne.n	8002578 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2203      	movs	r2, #3
 8002542:	4252      	negs	r2, r2
 8002544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2203      	movs	r2, #3
 8002554:	4013      	ands	r3, r2
 8002556:	d004      	beq.n	8002562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f9ce 	bl	80028fc <HAL_TIM_IC_CaptureCallback>
 8002560:	e007      	b.n	8002572 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f9c1 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f9cd 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2204      	movs	r2, #4
 8002580:	4013      	ands	r3, r2
 8002582:	2b04      	cmp	r3, #4
 8002584:	d125      	bne.n	80025d2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2204      	movs	r2, #4
 800258e:	4013      	ands	r3, r2
 8002590:	2b04      	cmp	r3, #4
 8002592:	d11e      	bne.n	80025d2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2205      	movs	r2, #5
 800259a:	4252      	negs	r2, r2
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	23c0      	movs	r3, #192	; 0xc0
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 f9a1 	bl	80028fc <HAL_TIM_IC_CaptureCallback>
 80025ba:	e007      	b.n	80025cc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f994 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 f9a0 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2208      	movs	r2, #8
 80025da:	4013      	ands	r3, r2
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d124      	bne.n	800262a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2208      	movs	r2, #8
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11d      	bne.n	800262a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2209      	movs	r2, #9
 80025f4:	4252      	negs	r2, r2
 80025f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2204      	movs	r2, #4
 80025fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2203      	movs	r2, #3
 8002606:	4013      	ands	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 f975 	bl	80028fc <HAL_TIM_IC_CaptureCallback>
 8002612:	e007      	b.n	8002624 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f968 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	0018      	movs	r0, r3
 8002620:	f000 f974 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2210      	movs	r2, #16
 8002632:	4013      	ands	r3, r2
 8002634:	2b10      	cmp	r3, #16
 8002636:	d125      	bne.n	8002684 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2210      	movs	r2, #16
 8002640:	4013      	ands	r3, r2
 8002642:	2b10      	cmp	r3, #16
 8002644:	d11e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2211      	movs	r2, #17
 800264c:	4252      	negs	r2, r2
 800264e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2208      	movs	r2, #8
 8002654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	23c0      	movs	r3, #192	; 0xc0
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 f948 	bl	80028fc <HAL_TIM_IC_CaptureCallback>
 800266c:	e007      	b.n	800267e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f93b 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0018      	movs	r0, r3
 800267a:	f000 f947 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2201      	movs	r2, #1
 800268c:	4013      	ands	r3, r2
 800268e:	2b01      	cmp	r3, #1
 8002690:	d10f      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	4013      	ands	r3, r2
 800269c:	2b01      	cmp	r3, #1
 800269e:	d108      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2202      	movs	r2, #2
 80026a6:	4252      	negs	r2, r2
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fd ffa9 	bl	8000604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b80      	cmp	r3, #128	; 0x80
 80026be:	d10f      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2280      	movs	r2, #128	; 0x80
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b80      	cmp	r3, #128	; 0x80
 80026cc:	d108      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2281      	movs	r2, #129	; 0x81
 80026d4:	4252      	negs	r2, r2
 80026d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 faa6 	bl	8002c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d10f      	bne.n	800270e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2240      	movs	r2, #64	; 0x40
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d108      	bne.n	800270e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2241      	movs	r2, #65	; 0x41
 8002702:	4252      	negs	r2, r2
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f907 	bl	800291c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2220      	movs	r2, #32
 8002716:	4013      	ands	r3, r2
 8002718:	2b20      	cmp	r3, #32
 800271a:	d10f      	bne.n	800273c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	4013      	ands	r3, r2
 8002726:	2b20      	cmp	r3, #32
 8002728:	d108      	bne.n	800273c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2221      	movs	r2, #33	; 0x21
 8002730:	4252      	negs	r2, r2
 8002732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fa70 	bl	8002c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	230f      	movs	r3, #15
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	223c      	movs	r2, #60	; 0x3c
 800275a:	5c9b      	ldrb	r3, [r3, r2]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_TIM_ConfigClockSource+0x20>
 8002760:	2302      	movs	r3, #2
 8002762:	e0bc      	b.n	80028de <HAL_TIM_ConfigClockSource+0x19a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	223c      	movs	r2, #60	; 0x3c
 8002768:	2101      	movs	r1, #1
 800276a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	223d      	movs	r2, #61	; 0x3d
 8002770:	2102      	movs	r1, #2
 8002772:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2277      	movs	r2, #119	; 0x77
 8002780:	4393      	bics	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	0192      	lsls	r2, r2, #6
 800279c:	4293      	cmp	r3, r2
 800279e:	d040      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0xde>
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0192      	lsls	r2, r2, #6
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d900      	bls.n	80027aa <HAL_TIM_ConfigClockSource+0x66>
 80027a8:	e088      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	0152      	lsls	r2, r2, #5
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d100      	bne.n	80027b4 <HAL_TIM_ConfigClockSource+0x70>
 80027b2:	e088      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x182>
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	0152      	lsls	r2, r2, #5
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d900      	bls.n	80027be <HAL_TIM_ConfigClockSource+0x7a>
 80027bc:	e07e      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
 80027be:	2b70      	cmp	r3, #112	; 0x70
 80027c0:	d018      	beq.n	80027f4 <HAL_TIM_ConfigClockSource+0xb0>
 80027c2:	d900      	bls.n	80027c6 <HAL_TIM_ConfigClockSource+0x82>
 80027c4:	e07a      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
 80027c6:	2b60      	cmp	r3, #96	; 0x60
 80027c8:	d04f      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x126>
 80027ca:	d900      	bls.n	80027ce <HAL_TIM_ConfigClockSource+0x8a>
 80027cc:	e076      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
 80027ce:	2b50      	cmp	r3, #80	; 0x50
 80027d0:	d03b      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x106>
 80027d2:	d900      	bls.n	80027d6 <HAL_TIM_ConfigClockSource+0x92>
 80027d4:	e072      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d057      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x146>
 80027da:	d900      	bls.n	80027de <HAL_TIM_ConfigClockSource+0x9a>
 80027dc:	e06e      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
 80027de:	2b30      	cmp	r3, #48	; 0x30
 80027e0:	d063      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x166>
 80027e2:	d86b      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d060      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x166>
 80027e8:	d868      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d05d      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x166>
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d05b      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x166>
 80027f2:	e063      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f000 f98c 	bl	8002b20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2277      	movs	r2, #119	; 0x77
 8002814:	4313      	orrs	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	609a      	str	r2, [r3, #8]
      break;
 8002820:	e052      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f000 f975 	bl	8002b20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	01c9      	lsls	r1, r1, #7
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
      break;
 8002848:	e03e      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	001a      	movs	r2, r3
 8002858:	f000 f8e8 	bl	8002a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2150      	movs	r1, #80	; 0x50
 8002862:	0018      	movs	r0, r3
 8002864:	f000 f942 	bl	8002aec <TIM_ITRx_SetConfig>
      break;
 8002868:	e02e      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	001a      	movs	r2, r3
 8002878:	f000 f906 	bl	8002a88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2160      	movs	r1, #96	; 0x60
 8002882:	0018      	movs	r0, r3
 8002884:	f000 f932 	bl	8002aec <TIM_ITRx_SetConfig>
      break;
 8002888:	e01e      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	001a      	movs	r2, r3
 8002898:	f000 f8c8 	bl	8002a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2140      	movs	r1, #64	; 0x40
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f922 	bl	8002aec <TIM_ITRx_SetConfig>
      break;
 80028a8:	e00e      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	0019      	movs	r1, r3
 80028b4:	0010      	movs	r0, r2
 80028b6:	f000 f919 	bl	8002aec <TIM_ITRx_SetConfig>
      break;
 80028ba:	e005      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80028bc:	230f      	movs	r3, #15
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
      break;
 80028c4:	e000      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80028c6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	223d      	movs	r2, #61	; 0x3d
 80028cc:	2101      	movs	r1, #1
 80028ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	223c      	movs	r2, #60	; 0x3c
 80028d4:	2100      	movs	r1, #0
 80028d6:	5499      	strb	r1, [r3, r2]

  return status;
 80028d8:	230f      	movs	r3, #15
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	ffff00ff 	.word	0xffff00ff

080028ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d008      	beq.n	8002956 <TIM_Base_SetConfig+0x2a>
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	05db      	lsls	r3, r3, #23
 800294a:	429a      	cmp	r2, r3
 800294c:	d003      	beq.n	8002956 <TIM_Base_SetConfig+0x2a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <TIM_Base_SetConfig+0xe8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d108      	bne.n	8002968 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2270      	movs	r2, #112	; 0x70
 800295a:	4393      	bics	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d018      	beq.n	80029a2 <TIM_Base_SetConfig+0x76>
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	05db      	lsls	r3, r3, #23
 8002976:	429a      	cmp	r2, r3
 8002978:	d013      	beq.n	80029a2 <TIM_Base_SetConfig+0x76>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <TIM_Base_SetConfig+0xe8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00f      	beq.n	80029a2 <TIM_Base_SetConfig+0x76>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <TIM_Base_SetConfig+0xec>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00b      	beq.n	80029a2 <TIM_Base_SetConfig+0x76>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <TIM_Base_SetConfig+0xf0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <TIM_Base_SetConfig+0x76>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <TIM_Base_SetConfig+0xf4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d003      	beq.n	80029a2 <TIM_Base_SetConfig+0x76>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <TIM_Base_SetConfig+0xf8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d108      	bne.n	80029b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <TIM_Base_SetConfig+0xfc>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	4393      	bics	r3, r2
 80029ba:	001a      	movs	r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00b      	beq.n	80029fa <TIM_Base_SetConfig+0xce>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <TIM_Base_SetConfig+0xf0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <TIM_Base_SetConfig+0xce>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <TIM_Base_SetConfig+0xf4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <TIM_Base_SetConfig+0xce>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0b      	ldr	r2, [pc, #44]	; (8002a24 <TIM_Base_SetConfig+0xf8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d103      	bne.n	8002a02 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	615a      	str	r2, [r3, #20]
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40002000 	.word	0x40002000
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40014400 	.word	0x40014400
 8002a24:	40014800 	.word	0x40014800
 8002a28:	fffffcff 	.word	0xfffffcff

08002a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4393      	bics	r3, r2
 8002a46:	001a      	movs	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	22f0      	movs	r2, #240	; 0xf0
 8002a56:	4393      	bics	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	220a      	movs	r2, #10
 8002a68:	4393      	bics	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	621a      	str	r2, [r3, #32]
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b006      	add	sp, #24
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <TIM_TI2_ConfigInputStage+0x60>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	22a0      	movs	r2, #160	; 0xa0
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	621a      	str	r2, [r3, #32]
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b006      	add	sp, #24
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	ffff0fff 	.word	0xffff0fff

08002aec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2270      	movs	r2, #112	; 0x70
 8002b00:	4393      	bics	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b004      	add	sp, #16
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <TIM_ETR_SetConfig+0x3c>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	609a      	str	r2, [r3, #8]
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	ffff00ff 	.word	0xffff00ff

08002b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	223c      	movs	r2, #60	; 0x3c
 8002b6e:	5c9b      	ldrb	r3, [r3, r2]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e047      	b.n	8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	223c      	movs	r2, #60	; 0x3c
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	223d      	movs	r2, #61	; 0x3d
 8002b84:	2102      	movs	r1, #2
 8002b86:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2270      	movs	r2, #112	; 0x70
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00f      	beq.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	05db      	lsls	r3, r3, #23
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10c      	bne.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	4393      	bics	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	223d      	movs	r2, #61	; 0x3d
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	223c      	movs	r2, #60	; 0x3c
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b004      	add	sp, #16
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40014000 	.word	0x40014000

08002c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e044      	b.n	8002cd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d107      	bne.n	8002c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2274      	movs	r2, #116	; 0x74
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7fe f997 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2224      	movs	r2, #36	; 0x24
 8002c6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 fbfe 	bl	8003480 <UART_SetConfig>
 8002c84:	0003      	movs	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e024      	b.n	8002cd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 fd79 	bl	8003790 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	490d      	ldr	r1, [pc, #52]	; (8002ce0 <HAL_UART_Init+0xa4>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	212a      	movs	r1, #42	; 0x2a
 8002cba:	438a      	bics	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 fe11 	bl	80038f8 <UART_CheckIdleState>
 8002cd6:	0003      	movs	r3, r0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	ffffb7ff 	.word	0xffffb7ff

08002ce4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	1dbb      	adds	r3, r7, #6
 8002cf0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d000      	beq.n	8002cfc <HAL_UART_Transmit_IT+0x18>
 8002cfa:	e06a      	b.n	8002dd2 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_UART_Transmit_IT+0x26>
 8002d02:	1dbb      	adds	r3, r7, #6
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e062      	b.n	8002dd4 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	015b      	lsls	r3, r3, #5
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d109      	bne.n	8002d2e <HAL_UART_Transmit_IT+0x4a>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2201      	movs	r2, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	d001      	beq.n	8002d2e <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e052      	b.n	8002dd4 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2274      	movs	r2, #116	; 0x74
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_UART_Transmit_IT+0x58>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e04b      	b.n	8002dd4 <HAL_UART_Transmit_IT+0xf0>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2274      	movs	r2, #116	; 0x74
 8002d40:	2101      	movs	r1, #1
 8002d42:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1dba      	adds	r2, r7, #6
 8002d4e:	2150      	movs	r1, #80	; 0x50
 8002d50:	8812      	ldrh	r2, [r2, #0]
 8002d52:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1dba      	adds	r2, r7, #6
 8002d58:	2152      	movs	r1, #82	; 0x52
 8002d5a:	8812      	ldrh	r2, [r2, #0]
 8002d5c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2221      	movs	r2, #33	; 0x21
 8002d70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	015b      	lsls	r3, r3, #5
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d107      	bne.n	8002d8e <HAL_UART_Transmit_IT+0xaa>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_UART_Transmit_IT+0xf8>)
 8002d8a:	669a      	str	r2, [r3, #104]	; 0x68
 8002d8c:	e002      	b.n	8002d94 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <HAL_UART_Transmit_IT+0xfc>)
 8002d92:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2274      	movs	r2, #116	; 0x74
 8002d98:	2100      	movs	r1, #0
 8002d9a:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002da0:	613b      	str	r3, [r7, #16]
  return(result);
 8002da2:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	2301      	movs	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b008      	add	sp, #32
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	08003e17 	.word	0x08003e17
 8002de0:	08003d63 	.word	0x08003d63

08002de4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	1dbb      	adds	r3, r7, #6
 8002df0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d150      	bne.n	8002e9c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_UART_Receive_IT+0x24>
 8002e00:	1dbb      	adds	r3, r7, #6
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e048      	b.n	8002e9e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	015b      	lsls	r3, r3, #5
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d109      	bne.n	8002e2c <HAL_UART_Receive_IT+0x48>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2201      	movs	r2, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e038      	b.n	8002e9e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2274      	movs	r2, #116	; 0x74
 8002e30:	5c9b      	ldrb	r3, [r3, r2]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_UART_Receive_IT+0x56>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e031      	b.n	8002e9e <HAL_UART_Receive_IT+0xba>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2274      	movs	r2, #116	; 0x74
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	4013      	ands	r3, r2
 8002e54:	d019      	beq.n	8002e8a <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e56:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5a:	613b      	str	r3, [r7, #16]
  return(result);
 8002e5c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	2301      	movs	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	04c9      	lsls	r1, r1, #19
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e8a:	1dbb      	adds	r3, r7, #6
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 fe3c 	bl	8003b10 <UART_Start_Receive_IT>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	e000      	b.n	8002e9e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b008      	add	sp, #32
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b0ab      	sub	sp, #172	; 0xac
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	22a4      	movs	r2, #164	; 0xa4
 8002eb8:	18b9      	adds	r1, r7, r2
 8002eba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	20a0      	movs	r0, #160	; 0xa0
 8002ec4:	1839      	adds	r1, r7, r0
 8002ec6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	219c      	movs	r1, #156	; 0x9c
 8002ed0:	1879      	adds	r1, r7, r1
 8002ed2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	18bb      	adds	r3, r7, r2
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a99      	ldr	r2, [pc, #612]	; (8003140 <HAL_UART_IRQHandler+0x298>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	2298      	movs	r2, #152	; 0x98
 8002ee0:	18bc      	adds	r4, r7, r2
 8002ee2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002ee4:	18bb      	adds	r3, r7, r2
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d114      	bne.n	8002f16 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d00f      	beq.n	8002f16 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ef6:	183b      	adds	r3, r7, r0
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2220      	movs	r2, #32
 8002efc:	4013      	ands	r3, r2
 8002efe:	d00a      	beq.n	8002f16 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d100      	bne.n	8002f0a <HAL_UART_IRQHandler+0x62>
 8002f08:	e296      	b.n	8003438 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	0010      	movs	r0, r2
 8002f12:	4798      	blx	r3
      }
      return;
 8002f14:	e290      	b.n	8003438 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f16:	2398      	movs	r3, #152	; 0x98
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d100      	bne.n	8002f22 <HAL_UART_IRQHandler+0x7a>
 8002f20:	e114      	b.n	800314c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f22:	239c      	movs	r3, #156	; 0x9c
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d106      	bne.n	8002f3c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f2e:	23a0      	movs	r3, #160	; 0xa0
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a83      	ldr	r2, [pc, #524]	; (8003144 <HAL_UART_IRQHandler+0x29c>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	d100      	bne.n	8002f3c <HAL_UART_IRQHandler+0x94>
 8002f3a:	e107      	b.n	800314c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f3c:	23a4      	movs	r3, #164	; 0xa4
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	d012      	beq.n	8002f6e <HAL_UART_IRQHandler+0xc6>
 8002f48:	23a0      	movs	r3, #160	; 0xa0
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	589b      	ldr	r3, [r3, r2]
 8002f64:	2201      	movs	r2, #1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f6e:	23a4      	movs	r3, #164	; 0xa4
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2202      	movs	r2, #2
 8002f76:	4013      	ands	r3, r2
 8002f78:	d011      	beq.n	8002f9e <HAL_UART_IRQHandler+0xf6>
 8002f7a:	239c      	movs	r3, #156	; 0x9c
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4013      	ands	r3, r2
 8002f84:	d00b      	beq.n	8002f9e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	589b      	ldr	r3, [r3, r2]
 8002f94:	2204      	movs	r2, #4
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f9e:	23a4      	movs	r3, #164	; 0xa4
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d011      	beq.n	8002fce <HAL_UART_IRQHandler+0x126>
 8002faa:	239c      	movs	r3, #156	; 0x9c
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	589b      	ldr	r3, [r3, r2]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fce:	23a4      	movs	r3, #164	; 0xa4
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d017      	beq.n	800300a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fda:	23a0      	movs	r3, #160	; 0xa0
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d105      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fe6:	239c      	movs	r3, #156	; 0x9c
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ff0:	d00b      	beq.n	800300a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2280      	movs	r2, #128	; 0x80
 8002ffe:	589b      	ldr	r3, [r3, r2]
 8003000:	2208      	movs	r2, #8
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800300a:	23a4      	movs	r3, #164	; 0xa4
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4013      	ands	r3, r2
 8003016:	d013      	beq.n	8003040 <HAL_UART_IRQHandler+0x198>
 8003018:	23a0      	movs	r3, #160	; 0xa0
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	04db      	lsls	r3, r3, #19
 8003022:	4013      	ands	r3, r2
 8003024:	d00c      	beq.n	8003040 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	589b      	ldr	r3, [r3, r2]
 8003036:	2220      	movs	r2, #32
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	589b      	ldr	r3, [r3, r2]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d100      	bne.n	800304c <HAL_UART_IRQHandler+0x1a4>
 800304a:	e1f7      	b.n	800343c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800304c:	23a4      	movs	r3, #164	; 0xa4
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2220      	movs	r2, #32
 8003054:	4013      	ands	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003058:	23a0      	movs	r3, #160	; 0xa0
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2220      	movs	r2, #32
 8003060:	4013      	ands	r3, r2
 8003062:	d008      	beq.n	8003076 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	0010      	movs	r0, r2
 8003074:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	589b      	ldr	r3, [r3, r2]
 800307c:	2194      	movs	r1, #148	; 0x94
 800307e:	187a      	adds	r2, r7, r1
 8003080:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2240      	movs	r2, #64	; 0x40
 800308a:	4013      	ands	r3, r2
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d004      	beq.n	800309a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003090:	187b      	adds	r3, r7, r1
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2228      	movs	r2, #40	; 0x28
 8003096:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003098:	d047      	beq.n	800312a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	0018      	movs	r0, r3
 800309e:	f000 fde7 	bl	8003c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2240      	movs	r2, #64	; 0x40
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d137      	bne.n	8003120 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b0:	f3ef 8310 	mrs	r3, PRIMASK
 80030b4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80030b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030b8:	2090      	movs	r0, #144	; 0x90
 80030ba:	183a      	adds	r2, r7, r0
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	2301      	movs	r3, #1
 80030c0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2140      	movs	r1, #64	; 0x40
 80030d6:	438a      	bics	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	183b      	adds	r3, r7, r0
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030e2:	f383 8810 	msr	PRIMASK, r3
}
 80030e6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d012      	beq.n	8003116 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_UART_IRQHandler+0x2a0>)
 80030f6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7fe f943 	bl	8001388 <HAL_DMA_Abort_IT>
 8003102:	1e03      	subs	r3, r0, #0
 8003104:	d01a      	beq.n	800313c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	0018      	movs	r0, r3
 8003112:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003114:	e012      	b.n	800313c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f99d 	bl	8003458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311e:	e00d      	b.n	800313c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0018      	movs	r0, r3
 8003124:	f000 f998 	bl	8003458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003128:	e008      	b.n	800313c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0018      	movs	r0, r3
 800312e:	f000 f993 	bl	8003458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	2100      	movs	r1, #0
 8003138:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800313a:	e17f      	b.n	800343c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	46c0      	nop			; (mov r8, r8)
    return;
 800313e:	e17d      	b.n	800343c <HAL_UART_IRQHandler+0x594>
 8003140:	0000080f 	.word	0x0000080f
 8003144:	04000120 	.word	0x04000120
 8003148:	08003d35 	.word	0x08003d35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003150:	2b01      	cmp	r3, #1
 8003152:	d000      	beq.n	8003156 <HAL_UART_IRQHandler+0x2ae>
 8003154:	e131      	b.n	80033ba <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003156:	23a4      	movs	r3, #164	; 0xa4
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2210      	movs	r2, #16
 800315e:	4013      	ands	r3, r2
 8003160:	d100      	bne.n	8003164 <HAL_UART_IRQHandler+0x2bc>
 8003162:	e12a      	b.n	80033ba <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003164:	23a0      	movs	r3, #160	; 0xa0
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2210      	movs	r2, #16
 800316c:	4013      	ands	r3, r2
 800316e:	d100      	bne.n	8003172 <HAL_UART_IRQHandler+0x2ca>
 8003170:	e123      	b.n	80033ba <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2210      	movs	r2, #16
 8003178:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2240      	movs	r2, #64	; 0x40
 8003182:	4013      	ands	r3, r2
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d000      	beq.n	800318a <HAL_UART_IRQHandler+0x2e2>
 8003188:	e09b      	b.n	80032c2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	217e      	movs	r1, #126	; 0x7e
 8003194:	187b      	adds	r3, r7, r1
 8003196:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003198:	187b      	adds	r3, r7, r1
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d100      	bne.n	80031a2 <HAL_UART_IRQHandler+0x2fa>
 80031a0:	e14e      	b.n	8003440 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2258      	movs	r2, #88	; 0x58
 80031a6:	5a9b      	ldrh	r3, [r3, r2]
 80031a8:	187a      	adds	r2, r7, r1
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d300      	bcc.n	80031b2 <HAL_UART_IRQHandler+0x30a>
 80031b0:	e146      	b.n	8003440 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	187a      	adds	r2, r7, r1
 80031b6:	215a      	movs	r1, #90	; 0x5a
 80031b8:	8812      	ldrh	r2, [r2, #0]
 80031ba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d06e      	beq.n	80032a4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80031d0:	2301      	movs	r3, #1
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	499a      	ldr	r1, [pc, #616]	; (8003450 <HAL_UART_IRQHandler+0x5a8>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	f383 8810 	msr	PRIMASK, r3
}
 80031f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f8:	f3ef 8310 	mrs	r3, PRIMASK
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80031fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003200:	677b      	str	r3, [r7, #116]	; 0x74
 8003202:	2301      	movs	r3, #1
 8003204:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003208:	f383 8810 	msr	PRIMASK, r3
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2101      	movs	r1, #1
 800321a:	438a      	bics	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003220:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8310 	mrs	r3, PRIMASK
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003230:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	673b      	str	r3, [r7, #112]	; 0x70
 8003234:	2301      	movs	r3, #1
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2140      	movs	r1, #64	; 0x40
 800324c:	438a      	bics	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003252:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003256:	f383 8810 	msr	PRIMASK, r3
}
 800325a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003268:	f3ef 8310 	mrs	r3, PRIMASK
 800326c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800326e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003272:	2301      	movs	r3, #1
 8003274:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2110      	movs	r1, #16
 800328a:	438a      	bics	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003294:	f383 8810 	msr	PRIMASK, r3
}
 8003298:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	0018      	movs	r0, r3
 80032a0:	f7fe f83a 	bl	8001318 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2258      	movs	r2, #88	; 0x58
 80032a8:	5a9a      	ldrh	r2, [r3, r2]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	215a      	movs	r1, #90	; 0x5a
 80032ae:	5a5b      	ldrh	r3, [r3, r1]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 f8d4 	bl	8003468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032c0:	e0be      	b.n	8003440 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2258      	movs	r2, #88	; 0x58
 80032c6:	5a99      	ldrh	r1, [r3, r2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	225a      	movs	r2, #90	; 0x5a
 80032cc:	5a9b      	ldrh	r3, [r3, r2]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	208e      	movs	r0, #142	; 0x8e
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	1a8a      	subs	r2, r1, r2
 80032d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	225a      	movs	r2, #90	; 0x5a
 80032dc:	5a9b      	ldrh	r3, [r3, r2]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d100      	bne.n	80032e6 <HAL_UART_IRQHandler+0x43e>
 80032e4:	e0ae      	b.n	8003444 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80032e6:	183b      	adds	r3, r7, r0
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d100      	bne.n	80032f0 <HAL_UART_IRQHandler+0x448>
 80032ee:	e0a9      	b.n	8003444 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f0:	f3ef 8310 	mrs	r3, PRIMASK
 80032f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80032f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f8:	2488      	movs	r4, #136	; 0x88
 80032fa:	193a      	adds	r2, r7, r4
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	2301      	movs	r3, #1
 8003300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	494f      	ldr	r1, [pc, #316]	; (8003454 <HAL_UART_IRQHandler+0x5ac>)
 8003316:	400a      	ands	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	193b      	adds	r3, r7, r4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003328:	f3ef 8310 	mrs	r3, PRIMASK
 800332c:	61bb      	str	r3, [r7, #24]
  return(result);
 800332e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003330:	2484      	movs	r4, #132	; 0x84
 8003332:	193a      	adds	r2, r7, r4
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	2301      	movs	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f383 8810 	msr	PRIMASK, r3
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	438a      	bics	r2, r1
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	193b      	adds	r3, r7, r4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	f383 8810 	msr	PRIMASK, r3
}
 800335e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800337a:	2480      	movs	r4, #128	; 0x80
 800337c:	193a      	adds	r2, r7, r4
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	2301      	movs	r3, #1
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	f383 8810 	msr	PRIMASK, r3
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2110      	movs	r1, #16
 8003398:	438a      	bics	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	193b      	adds	r3, r7, r4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033aa:	183b      	adds	r3, r7, r0
 80033ac:	881a      	ldrh	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0011      	movs	r1, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f858 	bl	8003468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033b8:	e044      	b.n	8003444 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033ba:	23a4      	movs	r3, #164	; 0xa4
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	035b      	lsls	r3, r3, #13
 80033c4:	4013      	ands	r3, r2
 80033c6:	d010      	beq.n	80033ea <HAL_UART_IRQHandler+0x542>
 80033c8:	239c      	movs	r3, #156	; 0x9c
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	03db      	lsls	r3, r3, #15
 80033d2:	4013      	ands	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	0352      	lsls	r2, r2, #13
 80033de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f000 ff08 	bl	80041f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033e8:	e02f      	b.n	800344a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033ea:	23a4      	movs	r3, #164	; 0xa4
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	4013      	ands	r3, r2
 80033f4:	d00f      	beq.n	8003416 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033f6:	23a0      	movs	r3, #160	; 0xa0
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	4013      	ands	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01e      	beq.n	8003448 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	0010      	movs	r0, r2
 8003412:	4798      	blx	r3
    }
    return;
 8003414:	e018      	b.n	8003448 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003416:	23a4      	movs	r3, #164	; 0xa4
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	4013      	ands	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_UART_IRQHandler+0x5a2>
 8003422:	23a0      	movs	r3, #160	; 0xa0
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2240      	movs	r2, #64	; 0x40
 800342a:	4013      	ands	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 fd4e 	bl	8003ed2 <UART_EndTransmit_IT>
    return;
 8003436:	e008      	b.n	800344a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	e006      	b.n	800344a <HAL_UART_IRQHandler+0x5a2>
    return;
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	e004      	b.n	800344a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	e002      	b.n	800344a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	e000      	b.n	800344a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003448:	46c0      	nop			; (mov r8, r8)
  }

}
 800344a:	46bd      	mov	sp, r7
 800344c:	b02b      	add	sp, #172	; 0xac
 800344e:	bd90      	pop	{r4, r7, pc}
 8003450:	fffffeff 	.word	0xfffffeff
 8003454:	fffffedf 	.word	0xfffffedf

08003458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	000a      	movs	r2, r1
 8003472:	1cbb      	adds	r3, r7, #2
 8003474:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b002      	add	sp, #8
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003488:	231e      	movs	r3, #30
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4aaf      	ldr	r2, [pc, #700]	; (800376c <UART_SetConfig+0x2ec>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4aaa      	ldr	r2, [pc, #680]	; (8003770 <UART_SetConfig+0x2f0>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4aa1      	ldr	r2, [pc, #644]	; (8003774 <UART_SetConfig+0x2f4>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a9d      	ldr	r2, [pc, #628]	; (8003778 <UART_SetConfig+0x2f8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d127      	bne.n	8003556 <UART_SetConfig+0xd6>
 8003506:	4b9d      	ldr	r3, [pc, #628]	; (800377c <UART_SetConfig+0x2fc>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	2203      	movs	r2, #3
 800350c:	4013      	ands	r3, r2
 800350e:	2b03      	cmp	r3, #3
 8003510:	d00d      	beq.n	800352e <UART_SetConfig+0xae>
 8003512:	d81b      	bhi.n	800354c <UART_SetConfig+0xcc>
 8003514:	2b02      	cmp	r3, #2
 8003516:	d014      	beq.n	8003542 <UART_SetConfig+0xc2>
 8003518:	d818      	bhi.n	800354c <UART_SetConfig+0xcc>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <UART_SetConfig+0xa4>
 800351e:	2b01      	cmp	r3, #1
 8003520:	d00a      	beq.n	8003538 <UART_SetConfig+0xb8>
 8003522:	e013      	b.n	800354c <UART_SetConfig+0xcc>
 8003524:	231f      	movs	r3, #31
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e065      	b.n	80035fa <UART_SetConfig+0x17a>
 800352e:	231f      	movs	r3, #31
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e060      	b.n	80035fa <UART_SetConfig+0x17a>
 8003538:	231f      	movs	r3, #31
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	2204      	movs	r2, #4
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e05b      	b.n	80035fa <UART_SetConfig+0x17a>
 8003542:	231f      	movs	r3, #31
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	2208      	movs	r2, #8
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e056      	b.n	80035fa <UART_SetConfig+0x17a>
 800354c:	231f      	movs	r3, #31
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2210      	movs	r2, #16
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e051      	b.n	80035fa <UART_SetConfig+0x17a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a89      	ldr	r2, [pc, #548]	; (8003780 <UART_SetConfig+0x300>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d134      	bne.n	80035ca <UART_SetConfig+0x14a>
 8003560:	4b86      	ldr	r3, [pc, #536]	; (800377c <UART_SetConfig+0x2fc>)
 8003562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003564:	23c0      	movs	r3, #192	; 0xc0
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	4013      	ands	r3, r2
 800356a:	22c0      	movs	r2, #192	; 0xc0
 800356c:	0292      	lsls	r2, r2, #10
 800356e:	4293      	cmp	r3, r2
 8003570:	d017      	beq.n	80035a2 <UART_SetConfig+0x122>
 8003572:	22c0      	movs	r2, #192	; 0xc0
 8003574:	0292      	lsls	r2, r2, #10
 8003576:	4293      	cmp	r3, r2
 8003578:	d822      	bhi.n	80035c0 <UART_SetConfig+0x140>
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	0292      	lsls	r2, r2, #10
 800357e:	4293      	cmp	r3, r2
 8003580:	d019      	beq.n	80035b6 <UART_SetConfig+0x136>
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	0292      	lsls	r2, r2, #10
 8003586:	4293      	cmp	r3, r2
 8003588:	d81a      	bhi.n	80035c0 <UART_SetConfig+0x140>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <UART_SetConfig+0x118>
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	0252      	lsls	r2, r2, #9
 8003592:	4293      	cmp	r3, r2
 8003594:	d00a      	beq.n	80035ac <UART_SetConfig+0x12c>
 8003596:	e013      	b.n	80035c0 <UART_SetConfig+0x140>
 8003598:	231f      	movs	r3, #31
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e02b      	b.n	80035fa <UART_SetConfig+0x17a>
 80035a2:	231f      	movs	r3, #31
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	e026      	b.n	80035fa <UART_SetConfig+0x17a>
 80035ac:	231f      	movs	r3, #31
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	2204      	movs	r2, #4
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	e021      	b.n	80035fa <UART_SetConfig+0x17a>
 80035b6:	231f      	movs	r3, #31
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2208      	movs	r2, #8
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e01c      	b.n	80035fa <UART_SetConfig+0x17a>
 80035c0:	231f      	movs	r3, #31
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	2210      	movs	r2, #16
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e017      	b.n	80035fa <UART_SetConfig+0x17a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6d      	ldr	r2, [pc, #436]	; (8003784 <UART_SetConfig+0x304>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d104      	bne.n	80035de <UART_SetConfig+0x15e>
 80035d4:	231f      	movs	r3, #31
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	e00d      	b.n	80035fa <UART_SetConfig+0x17a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a69      	ldr	r2, [pc, #420]	; (8003788 <UART_SetConfig+0x308>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d104      	bne.n	80035f2 <UART_SetConfig+0x172>
 80035e8:	231f      	movs	r3, #31
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e003      	b.n	80035fa <UART_SetConfig+0x17a>
 80035f2:	231f      	movs	r3, #31
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	2210      	movs	r2, #16
 80035f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	429a      	cmp	r2, r3
 8003604:	d15d      	bne.n	80036c2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8003606:	231f      	movs	r3, #31
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d015      	beq.n	800363c <UART_SetConfig+0x1bc>
 8003610:	dc18      	bgt.n	8003644 <UART_SetConfig+0x1c4>
 8003612:	2b04      	cmp	r3, #4
 8003614:	d00d      	beq.n	8003632 <UART_SetConfig+0x1b2>
 8003616:	dc15      	bgt.n	8003644 <UART_SetConfig+0x1c4>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <UART_SetConfig+0x1a2>
 800361c:	2b02      	cmp	r3, #2
 800361e:	d005      	beq.n	800362c <UART_SetConfig+0x1ac>
 8003620:	e010      	b.n	8003644 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003622:	f7fe fd95 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8003626:	0003      	movs	r3, r0
 8003628:	61bb      	str	r3, [r7, #24]
        break;
 800362a:	e012      	b.n	8003652 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800362c:	4b57      	ldr	r3, [pc, #348]	; (800378c <UART_SetConfig+0x30c>)
 800362e:	61bb      	str	r3, [r7, #24]
        break;
 8003630:	e00f      	b.n	8003652 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003632:	f7fe fd01 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8003636:	0003      	movs	r3, r0
 8003638:	61bb      	str	r3, [r7, #24]
        break;
 800363a:	e00a      	b.n	8003652 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	61bb      	str	r3, [r7, #24]
        break;
 8003642:	e006      	b.n	8003652 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003648:	231e      	movs	r3, #30
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
        break;
 8003650:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d100      	bne.n	800365a <UART_SetConfig+0x1da>
 8003658:	e07b      	b.n	8003752 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	005a      	lsls	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	18d2      	adds	r2, r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	0019      	movs	r1, r3
 800366c:	0010      	movs	r0, r2
 800366e:	f7fc fd4b 	bl	8000108 <__udivsi3>
 8003672:	0003      	movs	r3, r0
 8003674:	b29b      	uxth	r3, r3
 8003676:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	d91c      	bls.n	80036b8 <UART_SetConfig+0x238>
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	025b      	lsls	r3, r3, #9
 8003684:	429a      	cmp	r2, r3
 8003686:	d217      	bcs.n	80036b8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	b29a      	uxth	r2, r3
 800368c:	200e      	movs	r0, #14
 800368e:	183b      	adds	r3, r7, r0
 8003690:	210f      	movs	r1, #15
 8003692:	438a      	bics	r2, r1
 8003694:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	b29b      	uxth	r3, r3
 800369c:	2207      	movs	r2, #7
 800369e:	4013      	ands	r3, r2
 80036a0:	b299      	uxth	r1, r3
 80036a2:	183b      	adds	r3, r7, r0
 80036a4:	183a      	adds	r2, r7, r0
 80036a6:	8812      	ldrh	r2, [r2, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	183a      	adds	r2, r7, r0
 80036b2:	8812      	ldrh	r2, [r2, #0]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e04c      	b.n	8003752 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80036b8:	231e      	movs	r3, #30
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e047      	b.n	8003752 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036c2:	231f      	movs	r3, #31
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d015      	beq.n	80036f8 <UART_SetConfig+0x278>
 80036cc:	dc18      	bgt.n	8003700 <UART_SetConfig+0x280>
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d00d      	beq.n	80036ee <UART_SetConfig+0x26e>
 80036d2:	dc15      	bgt.n	8003700 <UART_SetConfig+0x280>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <UART_SetConfig+0x25e>
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d005      	beq.n	80036e8 <UART_SetConfig+0x268>
 80036dc:	e010      	b.n	8003700 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036de:	f7fe fd37 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 80036e2:	0003      	movs	r3, r0
 80036e4:	61bb      	str	r3, [r7, #24]
        break;
 80036e6:	e012      	b.n	800370e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e8:	4b28      	ldr	r3, [pc, #160]	; (800378c <UART_SetConfig+0x30c>)
 80036ea:	61bb      	str	r3, [r7, #24]
        break;
 80036ec:	e00f      	b.n	800370e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ee:	f7fe fca3 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 80036f2:	0003      	movs	r3, r0
 80036f4:	61bb      	str	r3, [r7, #24]
        break;
 80036f6:	e00a      	b.n	800370e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	61bb      	str	r3, [r7, #24]
        break;
 80036fe:	e006      	b.n	800370e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003704:	231e      	movs	r3, #30
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
        break;
 800370c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01e      	beq.n	8003752 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	085a      	lsrs	r2, r3, #1
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	18d2      	adds	r2, r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	0019      	movs	r1, r3
 8003724:	0010      	movs	r0, r2
 8003726:	f7fc fcef 	bl	8000108 <__udivsi3>
 800372a:	0003      	movs	r3, r0
 800372c:	b29b      	uxth	r3, r3
 800372e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	d909      	bls.n	800374a <UART_SetConfig+0x2ca>
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	025b      	lsls	r3, r3, #9
 800373c:	429a      	cmp	r2, r3
 800373e:	d204      	bcs.n	800374a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	e003      	b.n	8003752 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800374a:	231e      	movs	r3, #30
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800375e:	231e      	movs	r3, #30
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	781b      	ldrb	r3, [r3, #0]
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b008      	add	sp, #32
 800376a:	bd80      	pop	{r7, pc}
 800376c:	efff69f3 	.word	0xefff69f3
 8003770:	ffffcfff 	.word	0xffffcfff
 8003774:	fffff4ff 	.word	0xfffff4ff
 8003778:	40013800 	.word	0x40013800
 800377c:	40021000 	.word	0x40021000
 8003780:	40004400 	.word	0x40004400
 8003784:	40004800 	.word	0x40004800
 8003788:	40004c00 	.word	0x40004c00
 800378c:	007a1200 	.word	0x007a1200

08003790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	2201      	movs	r2, #1
 800379e:	4013      	ands	r3, r2
 80037a0:	d00b      	beq.n	80037ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a4a      	ldr	r2, [pc, #296]	; (80038d4 <UART_AdvFeatureConfig+0x144>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2202      	movs	r2, #2
 80037c0:	4013      	ands	r3, r2
 80037c2:	d00b      	beq.n	80037dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4a43      	ldr	r2, [pc, #268]	; (80038d8 <UART_AdvFeatureConfig+0x148>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	2204      	movs	r2, #4
 80037e2:	4013      	ands	r3, r2
 80037e4:	d00b      	beq.n	80037fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <UART_AdvFeatureConfig+0x14c>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	0019      	movs	r1, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2208      	movs	r2, #8
 8003804:	4013      	ands	r3, r2
 8003806:	d00b      	beq.n	8003820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4a34      	ldr	r2, [pc, #208]	; (80038e0 <UART_AdvFeatureConfig+0x150>)
 8003810:	4013      	ands	r3, r2
 8003812:	0019      	movs	r1, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2210      	movs	r2, #16
 8003826:	4013      	ands	r3, r2
 8003828:	d00b      	beq.n	8003842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <UART_AdvFeatureConfig+0x154>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2220      	movs	r2, #32
 8003848:	4013      	ands	r3, r2
 800384a:	d00b      	beq.n	8003864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <UART_AdvFeatureConfig+0x158>)
 8003854:	4013      	ands	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	4013      	ands	r3, r2
 800386c:	d01d      	beq.n	80038aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <UART_AdvFeatureConfig+0x15c>)
 8003876:	4013      	ands	r3, r2
 8003878:	0019      	movs	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	035b      	lsls	r3, r3, #13
 800388e:	429a      	cmp	r2, r3
 8003890:	d10b      	bne.n	80038aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <UART_AdvFeatureConfig+0x160>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	4013      	ands	r3, r2
 80038b2:	d00b      	beq.n	80038cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <UART_AdvFeatureConfig+0x164>)
 80038bc:	4013      	ands	r3, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }
}
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	fffdffff 	.word	0xfffdffff
 80038d8:	fffeffff 	.word	0xfffeffff
 80038dc:	fffbffff 	.word	0xfffbffff
 80038e0:	ffff7fff 	.word	0xffff7fff
 80038e4:	ffffefff 	.word	0xffffefff
 80038e8:	ffffdfff 	.word	0xffffdfff
 80038ec:	ffefffff 	.word	0xffefffff
 80038f0:	ff9fffff 	.word	0xff9fffff
 80038f4:	fff7ffff 	.word	0xfff7ffff

080038f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2280      	movs	r2, #128	; 0x80
 8003904:	2100      	movs	r1, #0
 8003906:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003908:	f7fd fc1e 	bl	8001148 <HAL_GetTick>
 800390c:	0003      	movs	r3, r0
 800390e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2208      	movs	r2, #8
 8003918:	4013      	ands	r3, r2
 800391a:	2b08      	cmp	r3, #8
 800391c:	d10c      	bne.n	8003938 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2280      	movs	r2, #128	; 0x80
 8003922:	0391      	lsls	r1, r2, #14
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <UART_CheckIdleState+0x8c>)
 8003928:	9200      	str	r2, [sp, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	f000 f82c 	bl	8003988 <UART_WaitOnFlagUntilTimeout>
 8003930:	1e03      	subs	r3, r0, #0
 8003932:	d001      	beq.n	8003938 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e021      	b.n	800397c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2204      	movs	r2, #4
 8003940:	4013      	ands	r3, r2
 8003942:	2b04      	cmp	r3, #4
 8003944:	d10c      	bne.n	8003960 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	03d1      	lsls	r1, r2, #15
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4a0d      	ldr	r2, [pc, #52]	; (8003984 <UART_CheckIdleState+0x8c>)
 8003950:	9200      	str	r2, [sp, #0]
 8003952:	2200      	movs	r2, #0
 8003954:	f000 f818 	bl	8003988 <UART_WaitOnFlagUntilTimeout>
 8003958:	1e03      	subs	r3, r0, #0
 800395a:	d001      	beq.n	8003960 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e00d      	b.n	800397c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2274      	movs	r2, #116	; 0x74
 8003976:	2100      	movs	r1, #0
 8003978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b004      	add	sp, #16
 8003982:	bd80      	pop	{r7, pc}
 8003984:	01ffffff 	.word	0x01ffffff

08003988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b094      	sub	sp, #80	; 0x50
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	1dfb      	adds	r3, r7, #7
 8003996:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003998:	e0a3      	b.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800399c:	3301      	adds	r3, #1
 800399e:	d100      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80039a0:	e09f      	b.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fd fbd1 	bl	8001148 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d13d      	bne.n	8003a34 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b8:	f3ef 8310 	mrs	r3, PRIMASK
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c0:	647b      	str	r3, [r7, #68]	; 0x44
 80039c2:	2301      	movs	r3, #1
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	f383 8810 	msr	PRIMASK, r3
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	494c      	ldr	r1, [pc, #304]	; (8003b0c <UART_WaitOnFlagUntilTimeout+0x184>)
 80039da:	400a      	ands	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ea:	f3ef 8310 	mrs	r3, PRIMASK
 80039ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f2:	643b      	str	r3, [r7, #64]	; 0x40
 80039f4:	2301      	movs	r3, #1
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2274      	movs	r2, #116	; 0x74
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e067      	b.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d050      	beq.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d146      	bne.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2280      	movs	r2, #128	; 0x80
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a62:	613b      	str	r3, [r7, #16]
  return(result);
 8003a64:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a68:	2301      	movs	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f383 8810 	msr	PRIMASK, r3
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4923      	ldr	r1, [pc, #140]	; (8003b0c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a80:	400a      	ands	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f383 8810 	msr	PRIMASK, r3
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a90:	f3ef 8310 	mrs	r3, PRIMASK
 8003a94:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a96:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	438a      	bics	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	f383 8810 	msr	PRIMASK, r3
}
 8003ac0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2280      	movs	r2, #128	; 0x80
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2274      	movs	r2, #116	; 0x74
 8003ada:	2100      	movs	r1, #0
 8003adc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e010      	b.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	425a      	negs	r2, r3
 8003af2:	4153      	adcs	r3, r2
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	001a      	movs	r2, r3
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d100      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003b00:	e74b      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b014      	add	sp, #80	; 0x50
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	fffffe5f 	.word	0xfffffe5f

08003b10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	1dbb      	adds	r3, r7, #6
 8003b1c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1dba      	adds	r2, r7, #6
 8003b28:	2158      	movs	r1, #88	; 0x58
 8003b2a:	8812      	ldrh	r2, [r2, #0]
 8003b2c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1dba      	adds	r2, r7, #6
 8003b32:	215a      	movs	r1, #90	; 0x5a
 8003b34:	8812      	ldrh	r2, [r2, #0]
 8003b36:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	015b      	lsls	r3, r3, #5
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d10d      	bne.n	8003b66 <UART_Start_Receive_IT+0x56>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <UART_Start_Receive_IT+0x4c>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	225c      	movs	r2, #92	; 0x5c
 8003b56:	4943      	ldr	r1, [pc, #268]	; (8003c64 <UART_Start_Receive_IT+0x154>)
 8003b58:	5299      	strh	r1, [r3, r2]
 8003b5a:	e02e      	b.n	8003bba <UART_Start_Receive_IT+0xaa>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	225c      	movs	r2, #92	; 0x5c
 8003b60:	21ff      	movs	r1, #255	; 0xff
 8003b62:	5299      	strh	r1, [r3, r2]
 8003b64:	e029      	b.n	8003bba <UART_Start_Receive_IT+0xaa>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <UART_Start_Receive_IT+0x7a>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <UART_Start_Receive_IT+0x70>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	225c      	movs	r2, #92	; 0x5c
 8003b7a:	21ff      	movs	r1, #255	; 0xff
 8003b7c:	5299      	strh	r1, [r3, r2]
 8003b7e:	e01c      	b.n	8003bba <UART_Start_Receive_IT+0xaa>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	225c      	movs	r2, #92	; 0x5c
 8003b84:	217f      	movs	r1, #127	; 0x7f
 8003b86:	5299      	strh	r1, [r3, r2]
 8003b88:	e017      	b.n	8003bba <UART_Start_Receive_IT+0xaa>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	055b      	lsls	r3, r3, #21
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d10d      	bne.n	8003bb2 <UART_Start_Receive_IT+0xa2>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <UART_Start_Receive_IT+0x98>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	225c      	movs	r2, #92	; 0x5c
 8003ba2:	217f      	movs	r1, #127	; 0x7f
 8003ba4:	5299      	strh	r1, [r3, r2]
 8003ba6:	e008      	b.n	8003bba <UART_Start_Receive_IT+0xaa>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	225c      	movs	r2, #92	; 0x5c
 8003bac:	213f      	movs	r1, #63	; 0x3f
 8003bae:	5299      	strh	r1, [r3, r2]
 8003bb0:	e003      	b.n	8003bba <UART_Start_Receive_IT+0xaa>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	225c      	movs	r2, #92	; 0x5c
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2222      	movs	r2, #34	; 0x22
 8003bc6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bce:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	430a      	orrs	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	f383 8810 	msr	PRIMASK, r3
}
 8003bf8:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	015b      	lsls	r3, r3, #5
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d107      	bne.n	8003c16 <UART_Start_Receive_IT+0x106>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <UART_Start_Receive_IT+0x158>)
 8003c12:	665a      	str	r2, [r3, #100]	; 0x64
 8003c14:	e002      	b.n	8003c1c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <UART_Start_Receive_IT+0x15c>)
 8003c1a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2274      	movs	r2, #116	; 0x74
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8310 	mrs	r3, PRIMASK
 8003c28:	613b      	str	r3, [r7, #16]
  return(result);
 8003c2a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2e:	2301      	movs	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2190      	movs	r1, #144	; 0x90
 8003c46:	0049      	lsls	r1, r1, #1
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b00c      	add	sp, #48	; 0x30
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	000001ff 	.word	0x000001ff
 8003c68:	08004091 	.word	0x08004091
 8003c6c:	08003f29 	.word	0x08003f29

08003c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08e      	sub	sp, #56	; 0x38
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c78:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f383 8810 	msr	PRIMASK, r3
}
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4925      	ldr	r1, [pc, #148]	; (8003d30 <UART_EndRxTransfer+0xc0>)
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f383 8810 	msr	PRIMASK, r3
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003caa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cae:	623b      	str	r3, [r7, #32]
  return(result);
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f383 8810 	msr	PRIMASK, r3
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	438a      	bics	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d118      	bne.n	8003d16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	2301      	movs	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2110      	movs	r1, #16
 8003d06:	438a      	bics	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b00e      	add	sp, #56	; 0x38
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	fffffedf 	.word	0xfffffedf

08003d34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	225a      	movs	r2, #90	; 0x5a
 8003d46:	2100      	movs	r1, #0
 8003d48:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2252      	movs	r2, #82	; 0x52
 8003d4e:	2100      	movs	r1, #0
 8003d50:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff fb7f 	bl	8003458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b08a      	sub	sp, #40	; 0x28
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d6e:	2b21      	cmp	r3, #33	; 0x21
 8003d70:	d14d      	bne.n	8003e0e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2252      	movs	r2, #82	; 0x52
 8003d76:	5a9b      	ldrh	r3, [r3, r2]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d132      	bne.n	8003de4 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d84:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	2301      	movs	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	438a      	bics	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f383 8810 	msr	PRIMASK, r3
}
 8003dae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db0:	f3ef 8310 	mrs	r3, PRIMASK
 8003db4:	617b      	str	r3, [r7, #20]
  return(result);
 8003db6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2140      	movs	r1, #64	; 0x40
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003de2:	e014      	b.n	8003e0e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	781a      	ldrb	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	b292      	uxth	r2, r2
 8003df0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2252      	movs	r2, #82	; 0x52
 8003e00:	5a9b      	ldrh	r3, [r3, r2]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b299      	uxth	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2252      	movs	r2, #82	; 0x52
 8003e0c:	5299      	strh	r1, [r3, r2]
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b00a      	add	sp, #40	; 0x28
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b08c      	sub	sp, #48	; 0x30
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e22:	2b21      	cmp	r3, #33	; 0x21
 8003e24:	d151      	bne.n	8003eca <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2252      	movs	r2, #82	; 0x52
 8003e2a:	5a9b      	ldrh	r3, [r3, r2]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d132      	bne.n	8003e98 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e32:	f3ef 8310 	mrs	r3, PRIMASK
 8003e36:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e38:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f383 8810 	msr	PRIMASK, r3
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	438a      	bics	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f383 8810 	msr	PRIMASK, r3
}
 8003e62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e64:	f3ef 8310 	mrs	r3, PRIMASK
 8003e68:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e6a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2140      	movs	r1, #64	; 0x40
 8003e86:	430a      	orrs	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e96:	e018      	b.n	8003eca <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	881a      	ldrh	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	05d2      	lsls	r2, r2, #23
 8003ea8:	0dd2      	lsrs	r2, r2, #23
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2252      	movs	r2, #82	; 0x52
 8003ebc:	5a9b      	ldrh	r3, [r3, r2]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2252      	movs	r2, #82	; 0x52
 8003ec8:	5299      	strh	r1, [r3, r2]
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b00c      	add	sp, #48	; 0x30
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eda:	f3ef 8310 	mrs	r3, PRIMASK
 8003ede:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f383 8810 	msr	PRIMASK, r3
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	438a      	bics	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f383 8810 	msr	PRIMASK, r3
}
 8003f0a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fc faee 	bl	80004fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b006      	add	sp, #24
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b090      	sub	sp, #64	; 0x40
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f30:	203e      	movs	r0, #62	; 0x3e
 8003f32:	183b      	adds	r3, r7, r0
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	215c      	movs	r1, #92	; 0x5c
 8003f38:	5a52      	ldrh	r2, [r2, r1]
 8003f3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f40:	2b22      	cmp	r3, #34	; 0x22
 8003f42:	d000      	beq.n	8003f46 <UART_RxISR_8BIT+0x1e>
 8003f44:	e095      	b.n	8004072 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	213c      	movs	r1, #60	; 0x3c
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003f50:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	183b      	adds	r3, r7, r0
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b2d9      	uxtb	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	400a      	ands	r2, r1
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	225a      	movs	r2, #90	; 0x5a
 8003f76:	5a9b      	ldrh	r3, [r3, r2]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b299      	uxth	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	225a      	movs	r2, #90	; 0x5a
 8003f82:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	225a      	movs	r2, #90	; 0x5a
 8003f88:	5a9b      	ldrh	r3, [r3, r2]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d178      	bne.n	8004082 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f90:	f3ef 8310 	mrs	r3, PRIMASK
 8003f94:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f96:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f383 8810 	msr	PRIMASK, r3
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4936      	ldr	r1, [pc, #216]	; (800408c <UART_RxISR_8BIT+0x164>)
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f383 8810 	msr	PRIMASK, r3
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
 8003fcc:	2301      	movs	r3, #1
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	f383 8810 	msr	PRIMASK, r3
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	f383 8810 	msr	PRIMASK, r3
}
 8003ff2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004004:	2b01      	cmp	r3, #1
 8004006:	d12f      	bne.n	8004068 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400e:	f3ef 8310 	mrs	r3, PRIMASK
 8004012:	60fb      	str	r3, [r7, #12]
  return(result);
 8004014:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
 8004018:	2301      	movs	r3, #1
 800401a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f383 8810 	msr	PRIMASK, r3
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2110      	movs	r1, #16
 8004030:	438a      	bics	r2, r1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2210      	movs	r2, #16
 8004048:	4013      	ands	r3, r2
 800404a:	2b10      	cmp	r3, #16
 800404c:	d103      	bne.n	8004056 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2210      	movs	r2, #16
 8004054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2258      	movs	r2, #88	; 0x58
 800405a:	5a9a      	ldrh	r2, [r3, r2]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff fa01 	bl	8003468 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004066:	e00c      	b.n	8004082 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	0018      	movs	r0, r3
 800406c:	f7fc fa5a 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 8004070:	e007      	b.n	8004082 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2108      	movs	r1, #8
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b010      	add	sp, #64	; 0x40
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	fffffedf 	.word	0xfffffedf

08004090 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b090      	sub	sp, #64	; 0x40
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004098:	203e      	movs	r0, #62	; 0x3e
 800409a:	183b      	adds	r3, r7, r0
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	215c      	movs	r1, #92	; 0x5c
 80040a0:	5a52      	ldrh	r2, [r2, r1]
 80040a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a8:	2b22      	cmp	r3, #34	; 0x22
 80040aa:	d000      	beq.n	80040ae <UART_RxISR_16BIT+0x1e>
 80040ac:	e095      	b.n	80041da <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	213c      	movs	r1, #60	; 0x3c
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80040b8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	183a      	adds	r2, r7, r0
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	8812      	ldrh	r2, [r2, #0]
 80040c8:	4013      	ands	r3, r2
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	225a      	movs	r2, #90	; 0x5a
 80040de:	5a9b      	ldrh	r3, [r3, r2]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b299      	uxth	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	225a      	movs	r2, #90	; 0x5a
 80040ea:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	225a      	movs	r2, #90	; 0x5a
 80040f0:	5a9b      	ldrh	r3, [r3, r2]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d178      	bne.n	80041ea <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f8:	f3ef 8310 	mrs	r3, PRIMASK
 80040fc:	617b      	str	r3, [r7, #20]
  return(result);
 80040fe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
 8004102:	2301      	movs	r3, #1
 8004104:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f383 8810 	msr	PRIMASK, r3
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4936      	ldr	r1, [pc, #216]	; (80041f4 <UART_RxISR_16BIT+0x164>)
 800411a:	400a      	ands	r2, r1
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f383 8810 	msr	PRIMASK, r3
}
 8004128:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412a:	f3ef 8310 	mrs	r3, PRIMASK
 800412e:	623b      	str	r3, [r7, #32]
  return(result);
 8004130:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
 8004134:	2301      	movs	r3, #1
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	f383 8810 	msr	PRIMASK, r3
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2101      	movs	r1, #1
 800414c:	438a      	bics	r2, r1
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416c:	2b01      	cmp	r3, #1
 800416e:	d12f      	bne.n	80041d0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004176:	f3ef 8310 	mrs	r3, PRIMASK
 800417a:	60bb      	str	r3, [r7, #8]
  return(result);
 800417c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004180:	2301      	movs	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f383 8810 	msr	PRIMASK, r3
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2110      	movs	r1, #16
 8004198:	438a      	bics	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2210      	movs	r2, #16
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d103      	bne.n	80041be <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2210      	movs	r2, #16
 80041bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2258      	movs	r2, #88	; 0x58
 80041c2:	5a9a      	ldrh	r2, [r3, r2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	0011      	movs	r1, r2
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7ff f94d 	bl	8003468 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041ce:	e00c      	b.n	80041ea <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7fc f9a6 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 80041d8:	e007      	b.n	80041ea <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2108      	movs	r1, #8
 80041e6:	430a      	orrs	r2, r1
 80041e8:	619a      	str	r2, [r3, #24]
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b010      	add	sp, #64	; 0x40
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	fffffedf 	.word	0xfffffedf

080041f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	2600      	movs	r6, #0
 800420c:	4d0c      	ldr	r5, [pc, #48]	; (8004240 <__libc_init_array+0x38>)
 800420e:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 8004210:	1b64      	subs	r4, r4, r5
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	2600      	movs	r6, #0
 800421a:	f000 f821 	bl	8004260 <_init>
 800421e:	4d0a      	ldr	r5, [pc, #40]	; (8004248 <__libc_init_array+0x40>)
 8004220:	4c0a      	ldr	r4, [pc, #40]	; (800424c <__libc_init_array+0x44>)
 8004222:	1b64      	subs	r4, r4, r5
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	00b3      	lsls	r3, r6, #2
 800422e:	58eb      	ldr	r3, [r5, r3]
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	00b3      	lsls	r3, r6, #2
 8004238:	58eb      	ldr	r3, [r5, r3]
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	080042b0 	.word	0x080042b0
 8004244:	080042b0 	.word	0x080042b0
 8004248:	080042b0 	.word	0x080042b0
 800424c:	080042b4 	.word	0x080042b4

08004250 <memset>:
 8004250:	0003      	movs	r3, r0
 8004252:	1882      	adds	r2, r0, r2
 8004254:	4293      	cmp	r3, r2
 8004256:	d100      	bne.n	800425a <memset+0xa>
 8004258:	4770      	bx	lr
 800425a:	7019      	strb	r1, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	e7f9      	b.n	8004254 <memset+0x4>

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
